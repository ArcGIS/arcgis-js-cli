import{p as e,y as t,cz as r,b7 as i,dG as n,q as s,cf as a,aR as o,b8 as l,eR as u,eS as p,cN as c,a5 as d,bc as m,ft as h,cA as y,bM as f,a as g,L as v,cB as R,dc as b,ak as w,i as x,cu as S,aT as I,fu as N,aB as O,cI as T,bQ as _,a_ as F,c4 as P,t as D,bo as M,k as j,fv as A,v as C,A as V,cY as J,aD as z,U as L,bO as E,fw as k,fx as U,eX as q,fy as Q,eZ as B,eY as H,cE as G,cF as W,cD as X,cG as Y,cJ as K,f0 as $,fz as Z,f3 as ee,dB as te}from"../main.js";import{r as re,n as ie,e as ne}from"./utils-c2cb965f.js";import"./ItemCache-710ba6c9.js";import"./LercCodec-6bf6a7c3.js";import{u as se}from"./pixelUtils-6e86d48c.js";import{f as ae,n as oe,a as le,R as ue,U as pe,I as ce}from"./RasterSymbolizer-b4394874.js";import{n as de,a as me,o as he,l as ye,u as fe,T as ge,y as ve,f as Re}from"./rasterRendererHelper-ea082e98.js";var be;const we=new Set(["Raster","Raster2","DEM","FillRaster"]),xe=new Set(["Rasters"]),Se=e=>e&&e.rasterFunction?Oe.fromJSON(e):e,Ie=e=>e&&e instanceof Oe?e.toJSON():e;var Ne;!function(e){e[e.MOSAIC=0]="MOSAIC",e[e.GROUP=1]="GROUP",e[e.ITEM=2]="ITEM"}(Ne||(Ne={}));let Oe=be=class extends a{constructor(e){super(e),this.functionArguments=null,this.functionName=null,this.outputPixelType="unknown",this.variableName=null,this.description=null,this.functionDefinition=null,this.thumbnail=null}readFunctionArguments(e,t){return(e=>{if(null==e)return null;const t={};for(const r of Object.keys(e))we.has(r)?t[r]=Se(e[r]):xe.has(r)&&Array.isArray(e[r])?t[r]=e[r].map(Se):t[r]=e[r];return t})(t.arguments||t.rasterFunctionArguments)}writeFunctionArguments(e,t,r){const i={};for(const t of Object.keys(e))we.has(t)?i[t]=Ie(e[t]):xe.has(t)&&Array.isArray(e[t])?i[t]=e[t].map(Ie):i[t]=Ie(e[t]);this.functionDefinition?t.arguments=i:t[r]=i}readFunctionName(e,t){const r=t.rasterFunctionInfos;return t.name||(r&&r.length&&"None"!==r[0].name?r[0].name:t.rasterFunction)}writeFunctionName(e,t,r){this.functionDefinition?t.name=e:t[r]=e}readFunctionType(e){return Ne[e]}writeFunctionType(e,t,r){t[r]=Ne[e]}clone(){return new be({functionName:this.functionName,functionArguments:o(this.functionArguments),outputPixelType:this.outputPixelType,variableName:this.variableName,description:this.description,functionType:this.functionType,functionDefinition:this.functionDefinition,thumbnail:this.thumbnail})}};e([t({json:{type:Object,write:{target:"rasterFunctionArguments"}}})],Oe.prototype,"functionArguments",void 0),e([r("functionArguments",["rasterFunctionArguments","arguments"])],Oe.prototype,"readFunctionArguments",null),e([i("functionArguments")],Oe.prototype,"writeFunctionArguments",null),e([t({json:{type:String,write:{target:"rasterFunction"}}})],Oe.prototype,"functionName",void 0),e([r("functionName",["rasterFunction","rasterFunctionInfos","name"])],Oe.prototype,"readFunctionName",null),e([i("functionName")],Oe.prototype,"writeFunctionName",null),e([n({C128:"c128",C64:"c64",F32:"f32",F64:"f64",S16:"s16",S32:"s32",S8:"s8",U1:"u1",U16:"u16",U2:"u2",U32:"u32",U4:"u4",U8:"u8",UNKNOWN:"unknown"},{ignoreUnknown:!1}),t({json:{default:"unknown"}})],Oe.prototype,"outputPixelType",void 0),e([t({type:String,json:{read:!0,write:!0}})],Oe.prototype,"variableName",void 0),e([t({type:String,json:{read:!0,write:!0,origins:{"web-document":{read:!1,write:!1}}}})],Oe.prototype,"description",void 0),e([t({json:{origins:{"web-document":{read:!1,write:!1}}}})],Oe.prototype,"functionType",void 0),e([r("functionType")],Oe.prototype,"readFunctionType",null),e([i("functionType")],Oe.prototype,"writeFunctionType",null),e([t({type:Object,json:{read:{source:"function"},write:{target:"function"},origins:{"web-document":{read:!1,write:!1}}}})],Oe.prototype,"functionDefinition",void 0),e([t({type:String,json:{read:!0,write:!0,origins:{"web-document":{read:!1,write:!1}}}})],Oe.prototype,"thumbnail",void 0),Oe=be=e([s("esri.layers.support.RasterFunction")],Oe);var Te=Oe;const _e={u1:[0,1],u2:[0,3],u4:[0,15],u8:[0,255],s8:[-128,127],u16:[0,65535],s16:[-32768,32767],u32:[0,4294967295],s32:[-2147483648,2147483647],f32:[-34e38,34e38],f64:[-Number.MAX_VALUE,Number.MAX_VALUE]},Fe={simple_scalar:"Simple Scalar",wind_barb:"Wind Barb",single_arrow:"Single Arrow",beaufort_kn:"Beaufort Wind (Knots)",beaufort_m:"Beaufort Wind (MetersPerSecond)",ocean_current_m:"Ocean Current (MetersPerSecond)",ocean_current_kn:"Ocean Current (Knots)"},Pe=new Set(["raster-stretch","unique-value","class-breaks","raster-shaded-relief","vector-field"]);function De(e){return Pe.has(e.type)}function Me(e,t){if(!e||!t)return o(e||t);const r=o(e);return"none"!==t.functionName.toLowerCase()&&(je(r.functionArguments).Raster=t),r}function je(e){const t=e.Raster;return t&&"esri.layers.support.RasterFunction"===t.declaredClass?je(t.functionArguments):e}const Ae={none:0,standardDeviation:3,histogramEqualization:4,minMax:5,percentClip:6,sigmoid:9};function Ce(e,t){const r=_e[String(t).toLowerCase()];return r&&e.push([Math.floor(r[0]-1),0,0,0],[Math.ceil(r[1]+1),0,0,0]),e}function Ve(e){if(!e)return;const{fields:t}=e,r=t&&t.find((e=>e&&e.name&&"value"===e.name.toLowerCase()));return r&&r.name}var Je;const ze=u()({MT_FIRST:"first",MT_LAST:"last",MT_MIN:"min",MT_MAX:"max",MT_MEAN:"mean",MT_BLEND:"blend",MT_SUM:"sum"}),Le=u()({esriMosaicNone:"none",esriMosaicCenter:"center",esriMosaicNadir:"nadir",esriMosaicViewpoint:"viewpoint",esriMosaicAttribute:"attribute",esriMosaicLockRaster:"lock-raster",esriMosaicNorthwest:"northwest",esriMosaicSeamline:"seamline"});let Ee=Je=class extends a{constructor(e){super(e),this.ascending=!0,this.itemRenderingRule=null,this.lockRasterIds=null,this.method=null,this.multidimensionalDefinition=null,this.objectIds=null,this.operation=null,this.sortField=null,this.sortValue=null,this.viewpoint=null,this.where=null}readAscending(e,t){return null!=t.ascending?t.ascending:null==t.sortAscending||t.sortAscending}readMethod(e,t){return function(e){let t;switch(e?e.toLowerCase().replace("esrimosaic",""):""){case"byattribute":case"attribute":t="esriMosaicAttribute";break;case"lockraster":t="esriMosaicLockRaster";break;case"center":t="esriMosaicCenter";break;case"northwest":t="esriMosaicNorthwest";break;case"nadir":t="esriMosaicNadir";break;case"viewpoint":t="esriMosaicViewpoint";break;case"seamline":t="esriMosaicSeamline";break;case"none":default:t="esriMosaicNone"}return Le.fromJSON(t)}(t.mosaicMethod||t.defaultMosaicMethod)}readOperation(e,t){const r=t.mosaicOperation,i=t.mosaicOperator&&t.mosaicOperator.toLowerCase(),n=r||(i?ze.toJSON(i):null);return ze.fromJSON(n)||"first"}castSortValue(e){return null==e||"string"==typeof e||"number"==typeof e?e:""+e}clone(){return new Je({ascending:this.ascending,itemRenderingRule:o(this.itemRenderingRule),lockRasterIds:o(this.lockRasterIds),method:this.method,multidimensionalDefinition:o(this.multidimensionalDefinition),objectIds:o(this.objectIds),operation:this.operation,sortField:this.sortField,sortValue:this.sortValue,viewpoint:o(this.viewpoint),where:this.where})}};e([t({type:Boolean,json:{write:!0}})],Ee.prototype,"ascending",void 0),e([r("ascending",["ascending","sortAscending"])],Ee.prototype,"readAscending",null),e([t({type:Te,json:{write:!0}})],Ee.prototype,"itemRenderingRule",void 0),e([t({type:[p],json:{write:{overridePolicy(){return{enabled:"lock-raster"===this.method}}}}})],Ee.prototype,"lockRasterIds",void 0),e([t({type:String,json:{type:Le.jsonValues,write:{target:"mosaicMethod",writer:Le.write}}})],Ee.prototype,"method",void 0),e([r("method",["mosaicMethod","defaultMosaicMethod"])],Ee.prototype,"readMethod",null),e([t({type:[me],json:{write:!0}})],Ee.prototype,"multidimensionalDefinition",void 0),e([t({type:[p],json:{name:"fids",write:!0}})],Ee.prototype,"objectIds",void 0),e([t({json:{type:ze.jsonValues,read:{reader:ze.read},write:{target:"mosaicOperation",writer:ze.write}}})],Ee.prototype,"operation",void 0),e([r("operation",["mosaicOperation","mosaicOperator"])],Ee.prototype,"readOperation",null),e([t({type:String,json:{write:{overridePolicy(){return{enabled:"attribute"===this.method}}}}})],Ee.prototype,"sortField",void 0),e([t({type:[String,Number],json:{write:{allowNull:!0,overridePolicy(){return{enabled:"attribute"===this.method,allowNull:!0}}}}})],Ee.prototype,"sortValue",void 0),e([c("sortValue")],Ee.prototype,"castSortValue",null),e([t({type:d,json:{write:!0}})],Ee.prototype,"viewpoint",void 0),e([t({type:String,json:{write:!0}})],Ee.prototype,"where",void 0),Ee=Je=e([s("esri.layers.support.MosaicRule")],Ee);var ke=Ee;const Ue=new m({RSP_NearestNeighbor:"nearest",RSP_BilinearInterpolation:"bilinear",RSP_CubicConvolution:"cubic",RSP_Majority:"majority"}),qe=new m({esriNoDataMatchAny:"any",esriNoDataMatchAll:"all"});let Qe=class extends a{constructor(){super(...arguments),this.layer=null,this.adjustAspectRatio=void 0,this.bandIds=void 0,this.compression=void 0,this.compressionQuality=void 0,this.compressionTolerance=.01,this.format=null,this.interpolation=null,this.noData=null,this.noDataInterpretation=void 0,this.pixelType=void 0,this.lercVersion=2}writeAdjustAspectRatio(e,t,r){this.layer.version<10.3||(t[r]=e)}writeCompressionQuality(e,t,r){this.format&&this.format.toLowerCase().indexOf("jpg")>-1&&null!=e&&(t[r]=e)}writeCompressionTolerance(e,t,r){"lerc"===this.format&&null!=e&&(t[r]=e)}writeLercVersion(e,t,r){"lerc"===this.format&&this.layer.version>=10.5&&(t[r]=e)}get version(){const e=this.layer;return e.bandIds,e.format,e.compressionQuality,e.compressionTolerance,e.interpolation,e.noData,e.noDataInterpretation,e.mosaicRule,e.renderingRule,e.adjustAspectRatio,e.pixelFilter,e.renderer,e.definitionExpression,(this._get("version")||0)+1}set version(e){this._set("version",e)}get mosaicRule(){const e=this.layer;let t=e.mosaicRule;const r=e.definitionExpression;return t?r&&r!==t.where&&(t=t.clone(),t.where=r):r&&(t=new ke({where:r})),t}get renderingRule(){const e=this.layer;let t=e.renderingRule;const r=e.pixelFilter,i=!e.format||e.format.indexOf("jpg")>-1||e.format.indexOf("png")>-1;return t=this._addResampleRasterFunction(t),i&&!r&&(t=this.combineRendererWithRenderingRule()),t}combineRendererWithRenderingRule(){var e;const t=this.layer,{rasterInfo:r,renderingRule:i,renderer:n}=t;return n&&De(n)?Me(function(e,t){switch(t=t||{},e.type){case"raster-stretch":return function(e,t){const r=new Te;r.functionName="Stretch";const i=Ae[de.toJSON(e.stretchType)],n="u8",s={StretchType:i,Statistics:function(e){const t=[];return e.forEach((e=>{const r=e;if(Array.isArray(r))t.push(r);else{if(null==r.min||null==r.max)return;const e=[r.min,r.max,r.avg||0,r.stddev||0];t.push(e)}})),t}(e.statistics),DRA:e.dynamicRangeAdjustment,UseGamma:e.useGamma,Gamma:e.gamma,ComputeGamma:e.computeGamma};if(null!=e.outputMin&&(s.Min=e.outputMin),null!=e.outputMax&&(s.Max=e.outputMax),i===Ae.standardDeviation?(s.NumberOfStandardDeviations=e.numberOfStandardDeviations,r.outputPixelType=n):i===Ae.percentClip?(s.MinPercent=e.minPercent,s.MaxPercent=e.maxPercent,r.outputPixelType=n):i===Ae.minMax?r.outputPixelType=n:i===Ae.sigmoid&&(s.SigmoidStrengthLevel=e.sigmoidStrengthLevel),r.functionArguments=s,r.variableName="Raster",e.colorRamp){const i=e.colorRamp,n=new Te,s=oe(i);return s?n.functionArguments={colorRamp:s}:!t.convertColorRampToColormap||"algorithmic"!==i.type&&"multipart"!==i.type?n.functionArguments={colorRamp:e.colorRamp.toJSON()}:n.functionArguments={Colormap:ae(i,256)},n.variableName="Raster",n.functionName="Colormap",n.functionArguments.Raster=r,n}return r}(e,t);case"class-breaks":return function(e,t){const r=[],i=[],n=[],s=[],a=1e-6,{pixelType:o,rasterAttributeTable:l}=t,u=l&&l.features,p=Ve(l);if(u&&Array.isArray(u)&&e.classBreakInfos){e.classBreakInfos.forEach(((t,r)=>{const i=t.symbol.color;let n;i.a&&u.forEach((a=>{n=a.attributes[e.field],(n>=t.minValue&&n<t.maxValue||r===e.classBreakInfos.length-1&&n>=t.minValue)&&s.push([a.attributes[p],i.r,i.g,i.b])}))}));const t=o?Ce(s,o):s,r=new Te;return r.functionName="Colormap",r.functionArguments={},r.functionArguments.Colormap=t,r.variableName="Raster",r}e.classBreakInfos.forEach(((e,t)=>{const o=e.symbol&&e.symbol.color;o.a?(0===t?r.push(e.minValue,e.maxValue+a):r.push(e.minValue+a,e.maxValue+a),i.push(t),s.push([t,o.r,o.g,o.b])):n.push(e.minValue,e.maxValue)}));const c=o?Ce(s,o):s,d=new Te;d.functionName="Remap",d.functionArguments={InputRanges:r,OutputValues:i,NoDataRanges:n},d.variableName="Raster";const m=new Te;return m.functionName="Colormap",m.functionArguments={Colormap:c,Raster:d},m}(e,t);case"unique-value":return function(e,t){const r=[],{pixelType:i,rasterAttributeTable:n}=t,s=n&&n.features,a=Ve(n);let o=!1;if(e.uniqueValueInfos&&e.uniqueValueInfos.forEach((t=>{const i=t.symbol.color;i.a&&(e.field!==a&&s?s&&s.forEach((n=>{String(n.attributes[e.field])===String(t.value)&&r.push([n.attributes[a],i.r,i.g,i.b])})):isNaN(+t.value)?o=!0:r.push([+t.value,i.r,i.g,i.b]))})),o)return null;const l=i&&r.length>0?Ce(r,i):r,u=new Te;return u.functionName="Colormap",u.functionArguments={},u.functionArguments.Colormap=l,u.variableName="Raster",u}(e,t);case"raster-colormap":return function(e,t){const r=e.extractColormap();if(!r||0===r.length)return;const{pixelType:i}=t,n=i?Ce(r,i):r,s=new Te;return s.functionName="Colormap",s.functionArguments={},s.functionArguments.Colormap=n,s}(e,t);case"vector-field":return function(e,t){const r=new Te;r.functionName="VectorFieldRenderer";const{dataType:i,bandProperties:n}=t,s="vector-uv"===i;let a,o;n&&2===n.length&&(a=n.map((e=>e.BandName.toLowerCase())).indexOf("magnitude"),o=n.map((e=>e.BandName.toLowerCase())).indexOf("direction")),-1!==a&&null!==a||(a=0,o=1);const u="arithmetic"===e.rotationType?1:2,p="flow-from"===e.flowRepresentation?0:1,c=e.visualVariables?e.visualVariables.filter((e=>"Magnitude"===e.field))[0]:new l,d={magnitudeBandID:a,directionBandID:o,isUVComponents:s,referenceSystem:u,massFlowAngleRepresentation:p,symbolTileSize:50,symbolTileSizeUnits:100,calculationMethod:"Vector Average",symbologyName:Fe[e.style.toLowerCase().replace("-","_")],minimumMagnitude:c.minDataValue,maximumMagnitude:c.maxDataValue,minimumSymbolSize:c.minSize,maximumSymbolSize:c.maxSize};return r.functionArguments=d,r}(e,t);case"raster-shaded-relief":return function(e,t){if("elevation"!==t.dataType)return new Te;const r=new Te;r.functionName="Hillshade";const i="traditional"===e.hillshadeType?0:1,n="none"===e.scalingType?1:3,s={HillshadeType:i,SlopeType:n,ZFactor:e.zFactor};return 0===i&&(s.Azimuth=e.azimuth,s.Altitude=e.altitude),3===n&&(s.PSPower=e.pixelSizePower,s.PSZFactor=e.pixelSizeFactor),r.functionArguments=s,r.variableName="Raster",e.colorRamp&&(r.functionName="ShadedRelief",s.Colormap=ae(e.colorRamp,256)),r}(e,t)}}(n,{rasterAttributeTable:r.attributeTable,pixelType:r.pixelType,dataType:r.dataType,bandProperties:null==(e=r.keyProperties)?void 0:e.BandProperties,convertColorRampToColormap:t.version<10.6}),i):i}_addResampleRasterFunction(e){var t;let r=null;if("vector-field"===(null==(t=this.layer.renderer)?void 0:t.type)){const e={},t=this.layer.renderingRule;if(!t||"Resample"!==t.functionName){const t="esriImageServiceDataTypeVector-UV"===this.layer.serviceDataType?7:10;e.rasterFunction="Resample",e.rasterFunctionArguments={ResamplingType:t,InputCellSize:{x:this.layer.pixelSizeX,y:this.layer.pixelSizeY}}}r=Te.fromJSON(e)}return Me(r,e)}};e([t()],Qe.prototype,"layer",void 0),e([t({json:{write:!0}})],Qe.prototype,"adjustAspectRatio",void 0),e([i("adjustAspectRatio")],Qe.prototype,"writeAdjustAspectRatio",null),e([t({json:{write:!0}}),h("layer.bandIds")],Qe.prototype,"bandIds",void 0),e([t({json:{write:!0}})],Qe.prototype,"compression",void 0),e([t({json:{write:!0}}),h("layer.compressionQuality")],Qe.prototype,"compressionQuality",void 0),e([i("compressionQuality")],Qe.prototype,"writeCompressionQuality",null),e([t({json:{write:!0}}),h("layer.compressionTolerance")],Qe.prototype,"compressionTolerance",void 0),e([i("compressionTolerance")],Qe.prototype,"writeCompressionTolerance",null),e([t({json:{write:!0}}),h("layer.format")],Qe.prototype,"format",void 0),e([t({type:String,json:{read:{reader:Ue.read},write:{writer:Ue.write}}}),h("layer.interpolation")],Qe.prototype,"interpolation",void 0),e([t({json:{write:!0}}),h("layer.noData")],Qe.prototype,"noData",void 0),e([t({type:String,json:{read:{reader:qe.read},write:{writer:qe.write}}}),h("layer.noDataInterpretation")],Qe.prototype,"noDataInterpretation",void 0),e([t({json:{write:!0}})],Qe.prototype,"pixelType",void 0),e([t({json:{write:!0}})],Qe.prototype,"lercVersion",void 0),e([i("lercVersion")],Qe.prototype,"writeLercVersion",null),e([t({type:Number,dependsOn:["layer.adjustAspectRatio","layer.bandIds","layer.format","layer.compressionQuality","layer.compressionTolerance","layer.definitionExpression","layer.interpolation","layer.noData","layer.noDataInterpretation","layer.mosaicRule","layer.renderingRule","layer.pixelFilter","layer.renderer","lercVersion","pixelType"]})],Qe.prototype,"version",null),e([t({dependsOn:["layer.mosaicRule","layer.definitionExpression"],json:{write:!0}})],Qe.prototype,"mosaicRule",null),e([t({dependsOn:["layer.renderingRule","layer.renderer","layer.rasterInfo","layer.format"],json:{write:!0}})],Qe.prototype,"renderingRule",null),Qe=e([s("esri.layers.mixins.ExportImageServiceParameters")],Qe);let Be=class extends a{constructor(){super(...arguments),this.catalogItemVisibilities=null,this.catalogItems=null,this.location=null,this.name=null,this.objectId=null,this.processedValues=null,this.properties=null,this.value=null}};e([t({json:{write:!0}})],Be.prototype,"catalogItemVisibilities",void 0),e([t({type:y,json:{write:!0}})],Be.prototype,"catalogItems",void 0),e([t({type:d,json:{write:!0}})],Be.prototype,"location",void 0),e([t({json:{write:!0}})],Be.prototype,"name",void 0),e([t({json:{write:!0}})],Be.prototype,"objectId",void 0),e([t({json:{write:!0}})],Be.prototype,"processedValues",void 0),e([t({json:{write:!0}})],Be.prototype,"properties",void 0),e([t({json:{write:!0}})],Be.prototype,"value",void 0),Be=e([s("esri.tasks.support.ImageServiceIdentifyResult")],Be);var He=Be;let Ge=class extends R{execute(e,t){return async function(e,t,r){const i=ne(e),n=t.geometry?[t.geometry]:[];return f(n).then((e=>{const n=t.toJSON(),s=e&&e[0];g(s)&&(n.geometry=JSON.stringify(s.toJSON()));const a=re({...i.query,f:"json",...n}),o=ie(a,r);return v(i.path+"/identify",o)})).then((e=>He.fromJSON(e.data)))}(this.url,e,t)}};Ge=e([s("esri.tasks.ImageServiceIdentifyTask")],Ge);var We=Ge;let Xe=class extends a{constructor(){super(...arguments),this.geometry=null,this.renderingRules=null,this.pixelSize=null,this.returnGeometry=!0,this.returnCatalogItems=!0,this.returnPixelValues=!0,this.maxItemCount=null,this.timeExtent=null,this.raster=void 0,this.viewId=void 0}writeGeometry(e,t,r){null!=e&&(t.geometryType=w(e),t[r]=JSON.stringify(e.toJSON()))}set mosaicRule(e){let t=e;t&&t.mosaicMethod&&(t=ke.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}writeMosaicRule(e,t,r){null!=e&&(t[r]=JSON.stringify(e.toJSON()))}set renderingRule(e){let t=e;t&&t.rasterFunction&&(t=Te.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("renderingRule",t)}writeRenderingRule(e,t,r){null!=e&&(t[r]=JSON.stringify(e.toJSON()))}writeRenderingRules(e,t,r){null!=e&&(t[r]=JSON.stringify(e.map((e=>e.toJSON()))))}writePixelSize(e,t,r){null!=e&&(t[r]=JSON.stringify(e.toJSON()))}writeTimeExtent(e,t,r){if(null!=e){const i=e.start?e.start.getTime():null,n=e.end?e.end.getTime():null;t[r]=null!=i?null!=n?`${i},${n}`:""+i:null}}};e([t({json:{write:!0}})],Xe.prototype,"geometry",void 0),e([i("geometry")],Xe.prototype,"writeGeometry",null),e([t({type:ke,json:{write:!0}})],Xe.prototype,"mosaicRule",null),e([i("mosaicRule")],Xe.prototype,"writeMosaicRule",null),e([t({type:Te,json:{write:!0}})],Xe.prototype,"renderingRule",null),e([i("renderingRule")],Xe.prototype,"writeRenderingRule",null),e([t({type:[Te],json:{write:!0}})],Xe.prototype,"renderingRules",void 0),e([i("renderingRules")],Xe.prototype,"writeRenderingRules",null),e([t({type:d,json:{write:!0}})],Xe.prototype,"pixelSize",void 0),e([i("pixelSize")],Xe.prototype,"writePixelSize",null),e([t({type:Boolean,json:{write:!0}})],Xe.prototype,"returnGeometry",void 0),e([t({type:Boolean,json:{write:!0}})],Xe.prototype,"returnCatalogItems",void 0),e([t({type:Boolean,json:{write:!0}})],Xe.prototype,"returnPixelValues",void 0),e([t({type:Number,json:{write:!0}})],Xe.prototype,"maxItemCount",void 0),e([t({type:b,json:{write:{target:"time"}}})],Xe.prototype,"timeExtent",void 0),e([i("timeExtent")],Xe.prototype,"writeTimeExtent",null),e([t({json:{write:!0}})],Xe.prototype,"raster",void 0),e([t({json:{write:!0}})],Xe.prototype,"viewId",void 0),Xe=e([s("esri.tasks.support.ImageServiceIdentifyParameters")],Xe);var Ye=Xe;const Ke=x.getLogger("esri.layers.mixins.ArcGISImageService"),$e=u()({RSP_NearestNeighbor:"nearest",RSP_BilinearInterpolation:"bilinear",RSP_CubicConvolution:"cubic",RSP_Majority:"majority"}),Ze=u()({esriNoDataMatchAny:"any",esriNoDataMatchAll:"all"}),et=u()({U1:"u1",U2:"u2",U4:"u4",U8:"u8",S8:"s8",U16:"u16",S16:"s16",U32:"u32",S32:"s32",F32:"f32",F64:"f64",C64:"c64",C128:"c128",UNKNOWN:"unknown"}),tt=new Set(["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"]),rt=k(U,{min:0,max:255}),it=n=>{let a=class extends n{constructor(){super(...arguments),this._functionRasterInfos={},this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this._symbolizer=null,this._defaultServiceMosaicRule=null,this.rasterAttributeTableFieldPrefix="Raster.",this.adjustAspectRatio=null,this.bandCount=null,this.bandIds=void 0,this.capabilities=null,this.compressionQuality=void 0,this.compressionTolerance=.01,this.copyright=null,this.definitionExpression=null,this.exportImageServiceParameters=null,this.rasterInfo=null,this.fields=null,this.fullExtent=null,this.hasMultidimensions=!1,this.imageMaxHeight=4100,this.imageMaxWidth=4100,this.interpolation=void 0,this.minScale=0,this.maxScale=0,this.multidimensionalInfo=null,this.noData=null,this.noDataInterpretation=void 0,this.objectIdField=null,this.pixelSizeX=null,this.pixelSizeY=null,this.pixelFilter=null,this.raster=void 0,this.viewId=void 0,this.renderer=null,this.rasterAttributeTable=null,this.rasterFunctionInfos=null,this.serviceDataType=null,this.spatialReference=null,this.pixelType=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.url=null,this.version=null}initialize(){this._set("exportImageServiceParameters",new Qe({layer:this}))}readDefaultServiceMosaicRule(e,t){return ke.fromJSON(t)}get rasterFunctionNamesIndex(){const e=new Map;return!this.rasterFunctionInfos||this.rasterFunctionInfos.length<1||this.rasterFunctionInfos.forEach((t=>{e.set(t.name.toLowerCase().replace(/ /gi,"_"),t.name)})),e}get queryTask(){return new _({url:this.url})}readBandIds(e,t){if(Array.isArray(e)&&e.length>0&&e.every((e=>"number"==typeof e)))return e}readCapabilities(e,t){return this._readCapabilities(t)}writeCompressionQuality(e,t,r){null!=e&&"lerc"!==this.format&&(t[r]=e)}writeCompressionTolerance(e,t,r){"lerc"===this.format&&null!=e&&(t[r]=e)}get fieldsIndex(){return this.fields?new F(this.fields):null}set format(e){e&&tt.has(e.toLowerCase())&&this._set("format",e.toLowerCase())}readFormat(e,t){return"esriImageServiceDataTypeVector-UV"===t.serviceDataType||"esriImageServiceDataTypeVector-MagDir"===t.serviceDataType||null!=this.pixelFilter?"lerc":"jpgpng"}readMinScale(e,t){return null!=t.minLOD&&null!=t.maxLOD?e:0}readMaxScale(e,t){return null!=t.minLOD&&null!=t.maxLOD?e:0}set mosaicRule(e){let t=e;t&&t.mosaicMethod&&(t=ke.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}readMosaicRule(e,t){return ke.fromJSON(e||t.mosaicRule||t)}writeMosaicRule(e,t,r){let i=this.mosaicRule;const n=this.definitionExpression;i?n&&n!==i.where&&(i=i.clone(),i.where=n):n&&(i=new ke({where:n})),this._isValidCustomizedMosaicRule(i)&&(t[r]=i.toJSON())}writeNoData(e,t,r){null!=e&&"number"==typeof e&&(t[r]=rt(e))}readObjectIdField(e,t){if(!e){const r=t.fields.filter((e=>"esriFieldTypeOID"===e.type||"oid"===e.type));e=r&&r[0]&&r[0].name}return e}get parsedUrl(){return this.url?P(this.url):null}readRenderer(e,t,r){const i=t&&t.layerDefinition&&t.layerDefinition.drawingInfo&&t.layerDefinition.drawingInfo.renderer,n=fe(i,r)||void 0;if(null!=n)return De(n)||Ke.warn("ArcGISImageService","Imagery layer doesn't support given renderer type."),n}get rasterFields(){const e=this.rasterAttributeTableFieldPrefix||"Raster.",t=new S({name:"Raster.ItemPixelValue",alias:"Item Pixel Value",domain:null,editable:!1,length:50,type:"string"}),r=new S({name:"Raster.ServicePixelValue",alias:"Service Pixel Value",domain:null,editable:!1,length:50,type:"string"}),i=new S({name:"Raster.ServicePixelValue.Raw",alias:"Raw Service Pixel Value",domain:null,editable:!1,length:50,type:"string"});let n=this.fields?o(this.fields):[];n.push(r),this.capabilities.operations.supportsQuery&&this.fields&&this.fields.length>0&&n.push(t),this.version>=10.4&&this.rasterFunctionInfos&&this.rasterFunctionInfos.some((e=>"none"===e.name.toLowerCase()))&&n.push(i),this.rasterFunctionInfos&&this.rasterFunctionInfos.filter((e=>"none"!==e.name.toLowerCase())).forEach((e=>{n.push(new S({name:"Raster.ServicePixelValue."+e.name,alias:e.name,domain:null,editable:!1,length:50,type:"string"}))})),null==this.pixelFilter||"esriImageServiceDataTypeVector-UV"!==this.serviceDataType&&"esriImageServiceDataTypeVector-MagDir"!==this.serviceDataType||(n.push(new S({name:"Raster.Magnitude",alias:"Magnitude",domain:null,editable:!1,type:"double"})),n.push(new S({name:"Raster.Direction",alias:"Direction",domain:null,editable:!1,type:"double"})));const s=this.rasterInfo.attributeTable&&this.rasterInfo.attributeTable.fields||null;if(s&&s.length>0){const t=s.filter((e=>"esriFieldTypeOID"!==e.type&&"value"!==e.name.toLowerCase())).map((t=>{const r=o(t);return r.name=e+t.name,r}));n=n.concat(t)}return n}set renderingRule(e){let t=e;t&&t.rasterFunction&&(t=Te.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("renderingRule",t)}readRenderingRule(e,t){const r=t.rasterFunctionInfos;return t.renderingRule||r&&r.length&&"None"!==r[0].name?Te.fromJSON(t.renderingRule||{rasterFunctionInfos:t.rasterFunctionInfos}):null}writeRenderingRule(e,t,r){this._isRFTJson(e)||(t[r]=e.toJSON())}readSpatialReference(e,t){const r=e||t.extent.spatialReference;return r?O.fromJSON(r):null}readPixelType(e){return et.fromJSON(e)||e}writePixelType(e,t,r){(D(this.serviceRasterInfo)||this.pixelType!==this.serviceRasterInfo.pixelType)&&(t[r]=et.toJSON(e))}readVersion(e,t){let r=t.currentVersion;return r||(r=t.hasOwnProperty("fields")||t.hasOwnProperty("timeInfo")?10:9.3),r}applyFilter(e){let t=e;return this.pixelFilter&&(t=this._clonePixelData(e),this.pixelFilter(t)),t}async applyRenderer(e,t){let r=e;if(!this._isPicture()&&this.renderer&&this._symbolizer&&!this.pixelFilter){const i=JSON.stringify(this._cachedRendererJson)!==JSON.stringify(this.renderer.toJSON()),n=this._rasterJobHandler.instance,{bandIds:s}=this;if(n){i&&(this._symbolizer.bind(),await n.updateSymbolizer(this._symbolizer,t),this._cachedRendererJson=this.renderer.toJSON());const a=await n.symbolize({bandIds:s,...e},t);r={extent:e.extent,pixelBlock:a}}else r={extent:e.extent,pixelBlock:this._symbolizer.symbolize({bandIds:s,...e})}}return r}destroy(){this._shutdownJobHandler()}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}fetchImage(e,t,r,i={}){if(null==e||null==t||null==r)return M(new j("imagery-layer:fetch-image","Insufficient parameters for requesting an image. A valid extent, width and height values are required."));const n=this.renderer||this._symbolizer?this.generateRasterInfo(this.renderingRule,{signal:i.signal}):null;return A(n).then((n=>{n&&(this.rasterInfo=n);const s={imageServiceParameters:this.getExportImageServiceParameters(e,t,r,i.timeExtent),imageProps:{extent:e,width:t,height:r,format:this.format},requestAsImageElement:i.requestAsImageElement&&!this.pixelFilter||!1,signal:i.signal};return this._requestArrayBuffer(s)}))}fetchKeyProperties(e){const t=e&&e.renderingRule&&e.renderingRule.toJSON();return v(this.parsedUrl.path+"/keyProperties",{query:this._getQueryParams({renderingRule:this.version>=10.3&&t?JSON.stringify(t):null})}).then((e=>e.data))}fetchRasterAttributeTable(e){const t=e&&e.renderingRule&&e.renderingRule.toJSON();return this.version<10.1?M(new j("#fetchRasterAttributeTable()","Failed to get rasterAttributeTable")):v(this.parsedUrl.path+"/rasterAttributeTable",{query:this._getQueryParams({renderingRule:this.version>=10.3&&t?JSON.stringify(t):null})}).then((e=>y.fromJSON(e.data)))}async getCatalogItemRasterInfo(e,t){const r=v(this.parsedUrl.path+"/"+e+"/info",{query:this._getQueryParams(),...t}).then((e=>e.data)),i=v(this.parsedUrl.path+"/"+e+"/info/keyProperties",{query:this._getQueryParams(),...t}).then((e=>e.data)).catch((()=>{})),n=await C([r,i]);if(!n[0])return;const s=I.fromJSON(n[0].extent),a=n[0].statistics?n[0].statistics.map((e=>({min:e[0],max:e[1],avg:e[2],stddev:e[3]}))):null;return new le({bandCount:n[0].bandCount,extent:s,spatialReference:s.sr,pixelSize:new d({x:n[0].pixelSizeX,y:n[0].pixelSizeY,spatialReference:s.sr}),pixelType:n[0].pixelType.toLowerCase(),statistics:a,histograms:n[0].histograms,keyProperties:n[1]||{}})}async getCatalogItemICSInfo(e,t){const{data:r}=await v(this.parsedUrl.path+"/"+e+"/info/ics",{query:this._getQueryParams(),...t}),i=r&&r.ics;if(!i)return;let n=null;try{n=(await v(this.parsedUrl.path+"/"+e+"/info",{query:this._getQueryParams(),...t})).data.extent}catch{}if(!n||!n.spatialReference)return{ics:i,icsToPixelTransform:null,icsExtent:null,northDirection:null};const s=this.version>=10.7?v(this.parsedUrl.path+"/"+e+"/info/icstopixel",{query:this._getQueryParams(),...t}).then((e=>e.data)).catch((()=>({}))):{},a=n.spatialReference,o={geometries:JSON.stringify({geometryType:"esriGeometryEnvelope",geometries:[n]}),inSR:a.wkid||JSON.stringify(a),outSR:"0:"+e},l=v(this.parsedUrl.path+"/project",{query:this._getQueryParams(o),...t}).then((e=>e.data)).catch((()=>({}))),u=(n.xmin+n.xmax)/2,p=(n.ymax-n.ymin)/6,c=n.ymin+p,d=[];for(let e=0;e<5;e++)d.push({x:u,y:c+p*e});const m={geometries:JSON.stringify({geometryType:"esriGeometryPoint",geometries:d}),inSR:a.wkid||JSON.stringify(a),outSR:"0:"+e},h=v(this.parsedUrl.path+"/project",{query:this._getQueryParams(m),...t}).then((e=>e.data)).catch((()=>({}))),y=await C([s,l,h]);let f=y[0].ipxf;if(null==f){var g,R,b;const e=null==(g=i.geodataXform)?void 0:g.xf_0;"topup"===(null==e||null==(R=e.name)?void 0:R.toLowerCase())&&6===(null==e||null==(b=e.coefficients)?void 0:b.length)&&(f={affine:{name:"ics [sensor: Frame] to pixel (column, row) transformation",coefficients:e.coefficients,cellsizeRatio:0,type:"GeometricXform"}})}const w=I.fromJSON(y[1]&&y[1].geometries&&y[1].geometries[0]);w&&(w.spatialReference=new O({wkid:0,imageCoordinateSystem:i}));const x=y[2].geometries?y[2].geometries.filter((e=>null!=e&&null!=e.x&&null!=e.y&&"NaN"!==e.x&&"NaN"!==e.y)):[],S=x.length;if(S<3)return{ics:i,icsToPixelTransform:f,icsExtent:w,northDirection:null};let N=0,T=0,_=0,F=0;for(let e=0;e<S;e++)N+=x[e].x,T+=x[e].y,_+=x[e].x*x[e].x,F+=x[e].x*x[e].y;const P=(S*F-N*T)/(S*_-N*N);let D=0;const M=x[4].x>x[0].x,j=x[4].y>x[0].y;return P===1/0?D=j?90:270:0===P?D=M?0:180:P>0?D=M?180*Math.atan(P)/Math.PI:180*Math.atan(P)/Math.PI+180:P<0&&(D=j?180+180*Math.atan(P)/Math.PI:360+180*Math.atan(P)/Math.PI),{ics:i,icsToPixelTransform:f,icsExtent:w,northDirection:D}}async generateRasterInfo(e,t){if((!e||"none"===e.functionName.toLowerCase())&&g(this.serviceRasterInfo))return this.serviceRasterInfo;const r=function(e){if(!e)return null;const t=JSON.stringify(e).match(/"rasterFunction":"(.*?")/gi),r=null==t?void 0:t.map((e=>e.replace('"rasterFunction":"',"").replace('"',"")));return r?r.join("/"):null}(e);if(this._functionRasterInfos[r])return this._functionRasterInfos[r];const i=this._generateRasterInfo(e,t);this._functionRasterInfos[r]=i;try{return await i}catch{return this._functionRasterInfos[r]=null,null}}getExportImageServiceParameters(e,t,r,i){const n=(e=e.clone().shiftCentralMeridian()).spatialReference;let s;if(n.imageCoordinateSystem){const{id:e,referenceServiceName:t}=n.imageCoordinateSystem;s=null!=e?t?this.parsedUrl.path.toLowerCase().indexOf("/"+t.toLowerCase()+"/")>-1?"0:"+e:JSON.stringify({icsid:e,icsns:t}):"0:"+e:JSON.stringify({ics:n.imageCoordinateSystem})}else s=n.wkid||JSON.stringify(n.toJSON());g(this.serviceRasterInfo)&&this.pixelType!==this.serviceRasterInfo.pixelType&&(this.exportImageServiceParameters.pixelType=this.pixelType);const a=this.exportImageServiceParameters.toJSON(),{bandIds:o,noData:l,mosaicRule:u,renderingRule:p}=a;o instanceof Array&&o.length>0&&(a.bandIds=o.join(",")),l instanceof Array&&l.length>0&&(a.noData=l.join(","));const c=this.timeInfo;u&&u.multidimensionalDefinition&&i&&c&&c.startField&&(u.multidimensionalDefinition=u.multidimensionalDefinition.filter((e=>e.dimensionName!==c.startField))),a.mosaicRule=u&&JSON.stringify(u),a.renderingRule=p&&JSON.stringify(p);const d={};if(i){const{start:e,end:t}=i.toJSON();e&&t&&e===t?d.time=""+e:null==e&&null==t||(d.time=`${null==e?"null":e},${null==t?"null":t}`)}return{bbox:e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:s,imageSR:s,size:t+","+r,...a,...d}}queryRasters(e){return this.queryTask.execute(e)}queryVisibleRasters(e,t){if(!e)return M(new j("imagery-layer: query-visible-rasters","missing query parameter"));const{pixelSize:r,returnDomainValues:i,returnTopmostRaster:n,showNoDataRecords:s}=t||{pixelSize:null,returnDomainValues:!1,returnTopmostRaster:!1,showNoDataRecords:!1};let a=!1,o=null,l=null;const u="raster.servicepixelvalue",p=this.rasterFunctionNamesIndex;if(g(e.outFields)&&(a=e.outFields.some((e=>-1===e.toLowerCase().indexOf(u))),this.version>=10.4)){const t=e.outFields.filter((e=>e.toLowerCase().indexOf(u)>-1&&e.length>u.length)).map((e=>{const t=e.slice(u.length+1);return[this._updateRenderingRulesFunctionName(t,p),t]}));o=t.map((e=>new Te({functionName:e[0]}))),l=t.map((e=>e[1])),0===o.length?this.renderingRule?(o.push(this.renderingRule),l.push(this.renderingRule.functionName)):o=null:this.renderingRule&&!o.some((e=>e.functionName===this.renderingRule.functionName))&&(o.push(this.renderingRule),l.push(this.renderingRule.functionName))}const c=D(e.outSpatialReference)||e.outSpatialReference.equals(this.spatialReference),d=this._getQueryParams({geometry:e.geometry,timeExtent:e.timeExtent,mosaicRule:this.exportImageServiceParameters.mosaicRule,renderingRule:this.version<10.4?this.renderingRule:null,renderingRules:o,pixelSize:r,returnCatalogItems:a,returnGeometry:c,maxItemCount:n?1:null});delete d.f;const m=new Ye(d),h=new We({url:this.url}),y=this.generateRasterInfo(this.renderingRule);return V((t=>{y.then((()=>{h.execute(m).then((r=>{const n=e.outFields;if(a&&!c&&r.catalogItems&&r.catalogItems.features&&r.catalogItems.features.length>0){const a=this.objectIdField||"ObjectId",o=r.catalogItems.features,u=o.map((e=>e.attributes&&e.attributes[a])),p=new J({objectIds:u,returnGeometry:!0,outSpatialReference:e.outSpatialReference,outFields:[a]});return this.queryRasters(p).then((u=>{u&&u.features&&u.features.length>0&&u.features.forEach((t=>{o.forEach((r=>{r.attributes[a]===t.attributes[a]&&(r.geometry=new z(t.geometry),r.geometry.spatialReference=e.outSpatialReference)}))})),t(this._processVisibleRastersResponse(r,{returnDomainValues:i,templateRRFunctionNames:l,showNoDataRecords:s,templateFields:n}))})).catch((()=>{throw new j("imagery-layer:query-visible-rasters","encountered error when querying visible rasters geometry")}))}t(this._processVisibleRastersResponse(r,{returnDomainValues:i,templateRRFunctionNames:l,showNoDataRecords:s,templateFields:n}))})).catch((()=>{throw new j("imagery-layer:query-visible-rasters","encountered error when querying visible rasters")}))}))}))}async fetchVariableStatisticsHistograms(e,t){const r=v(this.parsedUrl.path+"/statistics",{query:this._getQueryParams({variable:e}),signal:t}).then((e=>{var t;return null==(t=e.data)?void 0:t.statistics})),i=v(this.parsedUrl.path+"/histograms",{query:this._getQueryParams({variable:e}),signal:t}).then((e=>{var t;return null==(t=e.data)?void 0:t.histograms})),n=await C([r,i]);return n[0]&&n[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:n[0]||null,histograms:n[1]||null}}async _fetchService(e){var t;let r=this.sourceJSON;if(!r){const{data:t,ssl:i}=await v(this.parsedUrl.path,{query:this._getQueryParams(),signal:e});r=t,this.sourceJSON=r,i&&(this.url=this.url.replace(/^http:/i,"https:"))}if((null==(t=r.capabilities)?void 0:t.toLowerCase().split(",").map((e=>e.trim())).indexOf("tilesonly"))>-1)throw new j("imagery-layer:fetch-metadata","use ImageryTileLayer to open tiles-only image services");this.read(r,{origin:"service",url:this.parsedUrl}),g(this.serviceRasterInfo)&&!this.rasterInfo&&(this.rasterInfo=this.serviceRasterInfo);const i=g(this.serviceRasterInfo)?L(this.serviceRasterInfo):this._fetchAuxiliaryRasterInfo({serviceInfo:r,signal:e}).then((e=>(this._set("serviceRasterInfo",e),e))),n=this.renderingRule&&"none"!==this.renderingRule.functionName.toLowerCase()?this.generateRasterInfo(this.renderingRule,{signal:e}):null;return C([i,n]).then((e=>{e[1]?this._set("rasterInfo",e[1]):this._set("rasterInfo",e[0]),this._configDefaultRenderer(),this.watch("renderer",(()=>this._configDefaultRenderer())),this.watch("renderingRule",(e=>{(this.renderer||this._symbolizer||this.popupEnabled&&this.popupTemplate)&&this.generateRasterInfo(e).then((e=>{e&&(this.rasterInfo=e)}))}));const t=g(this.serviceRasterInfo)&&this.serviceRasterInfo.multidimensionalInfo;t&&this._updateMultidimensionalDefinition(t)}))}async _initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const e=new Re;this._rasterJobHandler.connectionPromise=e.initialize().then((()=>{this._rasterJobHandler.instance=e}),(()=>null)),await this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0}_isPicture(){return!this.format||this.format.indexOf("jpg")>-1||this.format.indexOf("png")>-1}_configDefaultRenderer(){if(!this._isPicture()&&!this.pixelFilter){if(!this.bandIds&&this.rasterInfo.bandCount>=3){const e=ge(this.rasterInfo);!e||3===this.rasterInfo.bandCount&&0===e[0]&&1===e[1]&&2===e[2]||(this.bandIds=e)}var e,t;this.renderer||(this.renderer=ve(this.rasterInfo,{bandIds:this.bandIds,variableName:this.renderingRule?null:null==(e=this.mosaicRule)||null==(t=e.multidimensionalDefinition)?void 0:t[0].variableName})),this._symbolizer?(this._symbolizer.rendererJSON=this.renderer.toJSON(),this._symbolizer.rasterInfo=this.rasterInfo):this._symbolizer=new ue({rendererJSON:this.renderer.toJSON(),rasterInfo:this.rasterInfo}),this._symbolizer.bind()||(this._symbolizer=null)}}_clonePixelData(e){return null==e?e:{extent:e.extent&&e.extent.clone(),pixelBlock:e.pixelBlock&&e.pixelBlock.clone()}}_getQueryParams(e){const{raster:t,viewId:r}=this;return{raster:t,viewId:r,f:"json",...e}}_decodePixelBlock(e,t,r){return this._rasterJobHandler.instance?this._rasterJobHandler.instance.decode({data:e,options:t}):pe(e,t,r)}async _fetchMultidimensionalInfo(e){var t;const r=await v(this.parsedUrl.path+"/multidimensionalInfo",{query:this._getQueryParams(),signal:e}).then((e=>{var t;return null==(t=e.data)?void 0:t.multidimensionalInfo}));return(null==(t=r.variables)?void 0:t.length)&&r.variables.forEach((e=>{var t;(null==(t=e.statistics)?void 0:t.length)&&e.statistics.forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation}))})),r}_fetchAuxiliaryRasterInfo(e){const t=e&&e.serviceInfo;if(!t)return M(new j("imagery-layer:fetch-metadata","valid serviceInfo is required"));const r=e.renderingRule?JSON.stringify(e.renderingRule.toJSON()):null,i=e.signal,n=!!(t.hasRasterAttributeTable&&this.version>=10.1)&&v(this.parsedUrl.path+"/rasterAttributeTable",{query:this._getQueryParams({renderingRule:this.version>=10.1?r:null}),signal:i}).then((e=>y.fromJSON(e.data))).catch((()=>null)),s=!!(t.hasColormap&&this.version>=10.1)&&v(this.parsedUrl.path+"/colormap",{query:this._getQueryParams({renderingRule:this.version>=10.6?r:null}),signal:i}).then((e=>{var t;return null==(t=e.data)?void 0:t.colormap})),a=!!(t.hasHistograms&&this.version>=10.1)&&v(this.parsedUrl.path+"/histograms",{query:this._getQueryParams({renderingRule:this.version>=10.1?r:null}),signal:i}).then((e=>{var t;return null==(t=e.data)?void 0:t.histograms})),o=this.version>=10.3&&v(this.parsedUrl.path+"/keyProperties",{query:this._getQueryParams({renderingRule:r}),signal:i}).then((e=>e.data)).catch((()=>{})),l=!!(t.hasMultidimensions&&this.version>=10.3)&&this._fetchMultidimensionalInfo();return C([n,s,a,o,l]).then((e=>{let r=null;if(t.minValues&&t.minValues.length===t.bandCount){r=[];for(let e=0;e<t.minValues.length;e++)r.push({min:t.minValues[e],max:t.maxValues[e],avg:t.meanValues[e],stddev:t.stdvValues[e]})}const i=Math.ceil((t.extent.xmax-t.extent.xmin)/t.pixelSizeX-.1),n=Math.ceil((t.extent.ymax-t.extent.ymin)/t.pixelSizeY-.1),s=O.fromJSON(t.spatialReference||t.extent.spatialReference);return new le({width:i,height:n,bandCount:t.bandCount,extent:I.fromJSON(t.extent),spatialReference:s,pixelSize:new d({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:s}),pixelType:t.pixelType.toLowerCase(),statistics:r,attributeTable:e[0]||null,colormap:e[1]||null,histograms:e[2]||null,keyProperties:e[3]||{},multidimensionalInfo:e[4]||null})}))}_requestArrayBuffer(e){const{imageProps:t,requestAsImageElement:r,signal:i}=e;if(r&&!this.pixelFilter&&t.format&&t.format.indexOf("png")>-1)return v(this.parsedUrl.path+"/exportImage",{responseType:"image",query:this._getQueryParams({f:"image",...e.imageServiceParameters}),signal:i}).then((e=>({imageElement:e.data,params:t})));const n=this._initJobHandler(),s=v(this.parsedUrl.path+"/exportImage",{responseType:"array-buffer",query:this._getQueryParams({f:"image",...e.imageServiceParameters}),signal:i});return C([s,n]).then((e=>{const r=e[0].data,n=t.format||"jpgpng";let s=n;if("bsq"!==s&&"bip"!==s&&(s=ce(r)),!s)throw new j("imagery-layer:fetch-image","unsupported format signature "+String.fromCharCode.apply(null,new Uint8Array(r)));const a="gif"===n||"bmp"===n||n.indexOf("png")>-1&&("png"===s||"jpg"===s),o={signal:i};return a?pe(r,{useCanvas:!0,...t},o).then((e=>({pixelData:{pixelBlock:e,extent:t.extent},params:t}))):this._decodePixelBlock(r,{width:t.width,height:t.height,planes:null,pixelType:null,noDataValue:null,format:n},o).then((e=>({pixelData:{pixelBlock:e,extent:t.extent},params:t})))}))}async _generateRasterInfo(e,t){const{data:r}=await v(this.parsedUrl.path,{query:this._getQueryParams({renderingRule:e}),...t});return await this._fetchAuxiliaryRasterInfo({serviceInfo:r,renderingRule:e,...t})}_isValidCustomizedMosaicRule(e){return e&&JSON.stringify(e.toJSON())!==JSON.stringify(this._defaultServiceMosaicRule&&this._defaultServiceMosaicRule.toJSON())}_updateMultidimensionalDefinition(e){if(this._isValidCustomizedMosaicRule(this.mosaicRule))return;const t=e.variables[0].dimensions,r=[];for(const e in t)if(t.hasOwnProperty(e)){const i=t[e],n=i.extent;let s=!0,a=[n[0]];i.hasRanges&&!0===i.hasRanges?(s=!1,a=[i.values[0]]):"stdz"===i.name.toLowerCase()&&Math.abs(n[1])<=Math.abs(n[0])&&(a=[n[1]]),r.push(new me({variableName:"",dimensionName:t[e].name,isSlice:s,values:a}))}if(r.length>0){this.mosaicRule=this.mosaicRule||new ke;const e=this.mosaicRule.multidimensionalDefinition;(!e||e&&e.length<=0)&&(this.mosaicRule.multidimensionalDefinition=r)}}_formatAttributeValue(e,t){if("string"==typeof e){const r=this.popupTemplate&&this.popupTemplate.fieldInfos,i=this._getFieldInfo(r,t),n=i&&i.format;if(n){let t,r;return e.trim().indexOf(",")>-1?(t=",",r=t+" ",this._formatDelimitedString(e,t,r,n)):e.trim().indexOf(" ")>-1?(t=r=" ",this._formatDelimitedString(e,t,r,n)):this._formatNumberFromString(e,n)}}return e}_getFieldInfo(e,t){if(!e||!e.length||!t)return;const r=t.toLowerCase();let i=void 0;return e.some((e=>!(!e.fieldName||e.fieldName.toLowerCase()!==r&&e.fieldName.toLowerCase()!==r.replace(/ /g,"_")||(i=e,0)))),i}_formatDelimitedString(e,t,r,i){return e&&t&&r&&i?e.trim().split(t).map((e=>this._formatNumberFromString(e,i))).join(r):e}_formatNumberFromString(e,t){if(!e||!t)return e;const r=Number(e);return isNaN(r)?e:t.format(r)}_processVisibleRastersResponse(e,t){t=t||{};const r=e.value,{templateRRFunctionNames:i,showNoDataRecords:n,returnDomainValues:s,templateFields:a}=t,o=e.processedValues;let l=e.catalogItems&&e.catalogItems.features,u=e.properties&&e.properties.Values&&e.properties.Values.map((e=>e.replace(/ /gi,", ")))||[];const p=this.objectIdField||"ObjectId",c="string"==typeof r&&r.toLowerCase().indexOf("nodata")>-1,d=[];if(r&&!l&&!c){const e={};e[p]=0,u=[r],l=[new E(this.fullExtent,null,e)]}if(!l)return[];let m,h,y;this._updateResponseFieldNames(l,a);for(let e=0;e<l.length;e++){if(m=l[e],null!=r&&!c){if(h=u[e],y=this.renderingRule&&o&&o.length>0&&i&&i.length>0&&i.indexOf(this.renderingRule.functionName)>-1?o[i.indexOf(this.renderingRule.functionName)]:r,"nodata"===h.toLowerCase()&&!n)continue;const t="Raster.ItemPixelValue",s="Raster.ServicePixelValue";m.attributes[t]=this._formatAttributeValue(h,t),m.attributes[s]=this._formatAttributeValue(y,s),this._updateFeatureWithMagDirValues(m,h);const a=this.fields&&this.fields.length>0;let l=this.renderingRule&&g(this.serviceRasterInfo)&&this.serviceRasterInfo.attributeTable?a?h:r:y;this.renderingRule||(l=a?h:r),this._updateFeatureWithRasterAttributeTableValues(m,l)}if(m.sourceLayer=this,s&&this._updateFeatureWithDomainValues(m),i&&o&&i.length===o.length)for(let e=0;e<i.length;e++){const t="Raster.ServicePixelValue."+i[e];m.attributes[t]=this._formatAttributeValue(o[e],t)}d.push(l[e])}return d}_updateFeatureWithRasterAttributeTableValues(e,t){const r=this.rasterInfo&&this.rasterInfo.attributeTable||g(this.serviceRasterInfo)&&this.serviceRasterInfo.attributeTable,i=r&&r.features;if(!i)return;const n=r.fields,s=n.map((e=>e.name)).filter((e=>"value"===e.toLowerCase())),a=s&&s[0];if(!a)return;const o=i.filter((e=>e.attributes[a]===(null!=t?parseInt(t,10):null)));o&&o[0]&&n.forEach((t=>{const r=this.rasterAttributeTableFieldPrefix+t.name;e.attributes[r]=this._formatAttributeValue(o[0].attributes[t.name],r)}))}_updateFeatureWithMagDirValues(e,t){if(!this.pixelFilter||"esriImageServiceDataTypeVector-UV"!==this.serviceDataType&&"esriImageServiceDataTypeVector-MagDir"!==this.serviceDataType)return;const r=t.replace(" ",",").split(",").map((e=>parseFloat(e))),i=r.map((e=>[e])),n=r.map((e=>({minValue:e,maxValue:e,noDataValue:null}))),s=new se({height:1,width:1,pixelType:"f32",pixels:i,statistics:n});this.pixelFilter({pixelBlock:s,extent:new I(0,0,0,0,this.spatialReference)}),e.attributes["Raster.Magnitude"]=s.pixels[0][0],e.attributes["Raster.Direction"]=s.pixels[1][0]}_updateFeatureWithDomainValues(e){const t=this.fields&&this.fields.filter((e=>e.domain&&"coded-value"===e.domain.type));null!=t&&t.forEach((t=>{const r=e.attributes[t.name];if(null!=r){const i=t.domain.codedValues.filter((e=>e.code===r))[0];i&&(e.attributes[t.name]=i.name)}}))}_updateResponseFieldNames(e,t){if(!t||t.length<1)return;const r=this.fieldsIndex;r&&e.forEach((e=>{if(e&&e.attributes)for(const i of t)if(r.has(i)){const t=r.get(i).name;t!==i&&(e.attributes[i]=e.attributes[t],delete e.attributes[t])}}))}_updateRenderingRulesFunctionName(e,t){if(!e||e.length<1)return;if("Raw"===e)return e.replace("Raw","None");const r=e.toLowerCase().replace(/ /gi,"_");return t.has(r)?t.get(r):e}_isRFTJson(e){return e.name&&e.arguments&&e.function&&e.hasOwnProperty("functionType")}_readCapabilities(e){const t=e.capabilities?e.capabilities.toLowerCase().split(",").map((e=>e.trim())):["image","catalog"],{currentVersion:r,advancedQueryCapabilities:i,maxRecordCount:n}=e,s=t.indexOf("image")>-1,a="esriImageServiceDataTypeElevation"===e.serviceDataType,o=!!(e.spatialReference||e.extent&&e.extent.spatialReference);return{operations:{supportsComputeHistograms:s,supportsExportImage:s,supportsIdentify:s,supportsMeasure:t.indexOf("mensuration")>-1&&o,supportsDownload:t.indexOf("download")>-1,supportsQuery:t.indexOf("catalog")>-1&&e.fields&&e.fields.length>0,supportsGetSamples:r>=10.2&&s,supportsProject:r>=10.3&&s,supportsComputeStatisticsHistograms:r>=10.4&&s,supportsQueryBoundary:r>=10.6&&s,supportsCalculateVolume:r>=10.7&&a,supportsComputePixelLocation:r>=10.7&&t.indexOf("catalog")>-1},query:{supportsStatistics:!(!i||!i.supportsStatistics),supportsOrderBy:!(!i||!i.supportsOrderBy),supportsDistinct:!(!i||!i.supportsDistinct),supportsPagination:!(!i||!i.supportsPagination),supportsStandardizedQueriesOnly:!(!i||!i.useStandardizedQueries),maxRecordCount:n}}}};return e([t()],a.prototype,"_functionRasterInfos",void 0),e([t()],a.prototype,"_rasterJobHandler",void 0),e([t()],a.prototype,"_symbolizer",void 0),e([t()],a.prototype,"_defaultServiceMosaicRule",void 0),e([r("_defaultServiceMosaicRule",["defaultMosaicMethod"])],a.prototype,"readDefaultServiceMosaicRule",null),e([t()],a.prototype,"_cachedRendererJson",void 0),e([t()],a.prototype,"rasterAttributeTableFieldPrefix",void 0),e([t({readOnly:!0,dependsOn:["rasterFunctionInfos"]})],a.prototype,"rasterFunctionNamesIndex",null),e([t({readOnly:!0,dependsOn:["url"]})],a.prototype,"queryTask",null),e([t()],a.prototype,"adjustAspectRatio",void 0),e([t({readOnly:!0}),h("serviceRasterInfo.bandCount")],a.prototype,"bandCount",void 0),e([t({type:[p],json:{write:!0}})],a.prototype,"bandIds",void 0),e([r("bandIds")],a.prototype,"readBandIds",null),e([t({readOnly:!0,json:{read:!1}})],a.prototype,"capabilities",void 0),e([r("service","capabilities",["capabilities","currentVersion","serviceDataType"])],a.prototype,"readCapabilities",null),e([t({type:Number})],a.prototype,"compressionQuality",void 0),e([i("compressionQuality")],a.prototype,"writeCompressionQuality",null),e([t({type:Number})],a.prototype,"compressionTolerance",void 0),e([i("compressionTolerance")],a.prototype,"writeCompressionTolerance",null),e([t({json:{read:{source:"copyrightText"}}})],a.prototype,"copyright",void 0),e([t({type:String,json:{read:{source:"layerDefinition.definitionExpression"},write:{target:"layerDefinition.definitionExpression"}}})],a.prototype,"definitionExpression",void 0),e([t({readOnly:!0,constructOnly:!0})],a.prototype,"exportImageServiceParameters",void 0),e([t()],a.prototype,"rasterInfo",void 0),e([t({readOnly:!0,type:[S]})],a.prototype,"fields",void 0),e([t({readOnly:!0,dependsOn:["fields"]})],a.prototype,"fieldsIndex",null),e([t({type:["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"],json:{write:!0}})],a.prototype,"format",null),e([r("service","format",["serviceDataType"])],a.prototype,"readFormat",null),e([t({type:I})],a.prototype,"fullExtent",void 0),e([t({readOnly:!0})],a.prototype,"hasMultidimensions",void 0),e([t({json:{read:{source:"maxImageHeight"}}})],a.prototype,"imageMaxHeight",void 0),e([t({json:{read:{source:"maxImageWidth"}}})],a.prototype,"imageMaxWidth",void 0),e([t({type:String,json:{type:$e.jsonValues,read:$e.read,write:$e.write}})],a.prototype,"interpolation",void 0),e([t()],a.prototype,"minScale",void 0),e([r("service","minScale")],a.prototype,"readMinScale",null),e([t()],a.prototype,"maxScale",void 0),e([r("service","maxScale")],a.prototype,"readMaxScale",null),e([t({type:ke})],a.prototype,"mosaicRule",null),e([r("mosaicRule",["mosaicRule","defaultMosaicMethod"])],a.prototype,"readMosaicRule",null),e([i("mosaicRule")],a.prototype,"writeMosaicRule",null),e([t({readOnly:!0}),h("serviceRasterInfo.multidimensionalInfo")],a.prototype,"multidimensionalInfo",void 0),e([t({json:{type:p}})],a.prototype,"noData",void 0),e([i("noData")],a.prototype,"writeNoData",null),e([t({type:String,json:{type:Ze.jsonValues,read:Ze.read,write:Ze.write}})],a.prototype,"noDataInterpretation",void 0),e([t({type:String,readOnly:!0,json:{read:{source:["fields"]}}})],a.prototype,"objectIdField",void 0),e([r("objectIdField")],a.prototype,"readObjectIdField",null),e([t({readOnly:!0,dependsOn:["url"]})],a.prototype,"parsedUrl",null),e([t({readOnly:!0}),h("serviceRasterInfo.pixelSize.x")],a.prototype,"pixelSizeX",void 0),e([t({readOnly:!0}),h("serviceRasterInfo.pixelSize.y")],a.prototype,"pixelSizeY",void 0),e([t({type:Function})],a.prototype,"pixelFilter",void 0),e([t()],a.prototype,"raster",void 0),e([t()],a.prototype,"viewId",void 0),e([t({types:he,json:{name:"layerDefinition.drawingInfo.renderer",origins:{"web-scene":{types:ye,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&"vector-field"!==e.type})}}}}})],a.prototype,"renderer",void 0),e([r("renderer")],a.prototype,"readRenderer",null),e([t(N)],a.prototype,"opacity",void 0),e([t({readOnly:!0}),h("serviceRasterInfo.attributeTable")],a.prototype,"rasterAttributeTable",void 0),e([t({readOnly:!0,dependsOn:["fields","rasterInfo","capabilities"]})],a.prototype,"rasterFields",null),e([t({readOnly:!0})],a.prototype,"rasterFunctionInfos",void 0),e([t({type:Te})],a.prototype,"renderingRule",null),e([r("renderingRule",["renderingRule","rasterFunctionInfos"])],a.prototype,"readRenderingRule",null),e([i("renderingRule")],a.prototype,"writeRenderingRule",null),e([t()],a.prototype,"serviceDataType",void 0),e([t({readOnly:!0,type:O})],a.prototype,"spatialReference",void 0),e([r("spatialReference",["spatialReference","extent"])],a.prototype,"readSpatialReference",null),e([t({json:{type:et.jsonValues}})],a.prototype,"pixelType",void 0),e([r("pixelType")],a.prototype,"readPixelType",null),e([i("pixelType")],a.prototype,"writePixelType",null),e([t({constructOnly:!0,type:le})],a.prototype,"serviceRasterInfo",void 0),e([t()],a.prototype,"sourceJSON",void 0),e([t(T)],a.prototype,"url",void 0),e([t({readOnly:!0})],a.prototype,"version",void 0),e([r("version",["currentVersion","fields","timeInfo"])],a.prototype,"readVersion",null),a=e([s("esri.layers.mixins.ArcGISImageService")],a),a};let nt=class extends(q(Q(B(H(G(W(it(X(Y(K)))))))))){constructor(...e){super(...e),this.legendEnabled=!0,this.isReference=null,this.operationalLayerType="ArcGISImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.type="imagery"}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=g(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).then((()=>this._fetchService(t)),(()=>this._fetchService(t)))),L(this)}writeOperationalLayerType(e,t,r){var i;const n="vector-field"===(null==(i=this.renderer)?void 0:i.type);t[r]=n?"ArcGISImageServiceVectorLayer":"ArcGISImageServiceLayer"}get defaultPopupTemplate(){return this.createPopupTemplate()}createPopupTemplate(e){const t=this.rasterFields,r=this.title,i=new Set;let n=!1,s=!1;this.capabilities&&(n=this.capabilities.operations.supportsQuery&&this.fields&&this.fields.length>0,s=n&&("esriImageServiceDataTypeVector-UV"===this.serviceDataType||"esriImageServiceDataTypeVector-MagDir"===this.serviceDataType));const a=new Set;n&&(a.add("raster.itempixelvalue"),s&&a.add("raster.magnitude").add("raster.direction"));for(const e of t){const t=e.name.toLowerCase();a.has(t)||t.indexOf("raster.servicepixelvalue.")>-1||i.add(e.name)}return $({fields:t,title:r},{...e,visibleFieldNames:i})}redraw(){this.emit("redraw")}};e([t(Z)],nt.prototype,"legendEnabled",void 0),e([t({type:["show","hide"]})],nt.prototype,"listMode",void 0),e([t({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],nt.prototype,"isReference",void 0),e([t({type:["ArcGISImageServiceLayer"],json:{origins:{"web-map":{type:["ArcGISImageServiceLayer","ArcGISImageServiceVectorLayer"],read:!1,write:{target:"layerType",ignoreOrigin:!0}}}}})],nt.prototype,"operationalLayerType",void 0),e([i("web-map","operationalLayerType")],nt.prototype,"writeOperationalLayerType",null),e([t(ee)],nt.prototype,"popupEnabled",void 0),e([t({type:te,json:{read:{source:"popupInfo"},write:{target:"popupInfo"}}})],nt.prototype,"popupTemplate",void 0),e([t({readOnly:!0,dependsOn:["fields","title"]})],nt.prototype,"defaultPopupTemplate",null),e([t({readOnly:!0,json:{read:!1}})],nt.prototype,"type",void 0),nt=e([s("esri.layers.ImageryLayer")],nt);var st=nt;export default st;
