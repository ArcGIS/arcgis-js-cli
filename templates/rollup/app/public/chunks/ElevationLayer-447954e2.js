import{i as e,cC as t,af as r,bo as i,v as s,U as a,cD as o,cE as n,cF as l,cG as h,a as c,k as p,aG as d,L as u,cp as y,p as m,y as v,cH as g,cI as f,cz as w,q as _,cJ as S}from"../main.js";import"./serviceTileInfoProperty-d5279f88.js";import"./TilemapCache-461e4d63.js";import{a as T}from"./ArcGISCachedService-35caf4aa.js";const b=e.getLogger("esri.views.3d.support.WorkerHandle");class I extends class{constructor(e,r,i,s={}){this._methodName=r,this._promise=t(e,{...s,scheduler:i}).then((e=>{void 0===this._thread?(this._thread=e,this._promise=null,s.hasInitialize&&this.broadcast({},"initialize")):e.close()})),this._promise.catch((t=>b.error(`Failed to initialize ${e} worker: ${t}`)))}destroy(){this._thread&&(this._thread.close(),this._thread=null),this._promise=null}invoke(e,t){if(this._thread){const r=this.getTransferList(e);return this._thread.invoke(this._methodName,e,{transferList:r,signal:t})}return this._promise?this._promise.then((()=>(r(t),this.invoke(e,t)))):i(null)}broadcast(e,t){return this._thread?s(this._thread.broadcast(t,e)).then((()=>{})):this._promise?this._promise.then((()=>this.broadcast(e,t))):i()}get promise(){return this._promise}}{constructor(e){super("LercWorker","_decode",e,{strategy:"dedicated"}),this.scheduler=e}decode(e,t,r){return e&&0!==e.byteLength?this.invoke({buffer:e,options:t},r):a(null)}getTransferList(e){return[e.buffer]}}const x=new Map;const E=e.getLogger("esri.layers.ElevationLayer");let L=class extends(T(o(n(l(h(S)))))){constructor(...e){super(...e),this.copyright=null,this.heightModelInfo=null,this.path=null,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=function(e){let t=x.get(e);return t||(t={instance:new I(e),ref:0},x.set(e,t)),++t.ref,t.instance}()}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}destroy(){(function(e){if(null==e)return;const t=e.scheduler,r=x.get(t);r&&--r.ref<=0&&(r.instance.destroy(),x.delete(t))})(this._lercDecoder),this._lercDecoder=null}set minScale(e){this.constructed&&E.warn(this.declaredClass+".minScale support has been removed (since 4.5)")}get minScale(){}set maxScale(e){this.constructed&&E.warn(this.declaredClass+".maxScale support has been removed (since 4.5)")}get maxScale(){}readVersion(e,t){let r=t.currentVersion;return r||(r=9.3),r}load(e){const t=c(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:e=>{for(let t=0;t<e.typeKeywords.length;t++)if("elevation 3d layer"===e.typeKeywords[t].toLowerCase())return!0;throw new p("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},e).then((()=>this._fetchImageService(t)),(()=>this._fetchImageService(t)))),a(this)}fetchTile(e,t,r,i){const s=c((i=i||{signal:null}).signal)?i.signal:i.signal=d().signal,a={responseType:"array-buffer",signal:s},o={noDataValue:i.noDataValue,returnFileInfo:!0};return this.load().then((()=>this._fetchTileAvailability(e,t,r,i))).then((()=>u(this.getTileUrl(e,t,r),a))).then((e=>this._lercDecoder.decode(e.data,o,s))).then((e=>({values:e.pixelData,width:e.width,height:e.height,maxZError:e.fileInfo.maxZError,noDataValue:e.noDataValue,minValue:e.minValue,maxValue:e.maxValue})))}getTileUrl(e,t,r){const i=!this.tilemapCache&&this.supportsBlankTile,s=y({...this.parsedUrl.query,blankTile:!i&&null});return`${this.parsedUrl.path}/tile/${e}/${t}/${r}${s?"?"+s:""}`}queryElevation(e,t){return this._importElevationQuery().then((r=>(new r.ElevationQuery).query(this,e,t)))}createElevationSampler(e,t){return this._importElevationQuery().then((r=>(new r.ElevationQuery).createSampler(this,e,t)))}_fetchTileAvailability(e,t,r,i){return this.tilemapCache?this.tilemapCache.fetchAvailability(e,t,r,i):a("unknown")}async _fetchImageService(e){if(this.sourceJSON)return this.sourceJSON;const t={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:e},r=await u(this.parsedUrl.path,t);r.ssl&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r.data,this.read(r.data,{origin:"service",url:this.parsedUrl})}_importElevationQuery(){return import("./ElevationQuery-39450745.js")}};m([v({json:{read:{source:"copyrightText"}}})],L.prototype,"copyright",void 0),m([v({readOnly:!0,type:g})],L.prototype,"heightModelInfo",void 0),m([v({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],L.prototype,"path",void 0),m([v({type:["show","hide"]})],L.prototype,"listMode",void 0),m([v({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],L.prototype,"minScale",null),m([v({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],L.prototype,"maxScale",null),m([v({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],L.prototype,"opacity",void 0),m([v({type:["ArcGISTiledElevationServiceLayer"]})],L.prototype,"operationalLayerType",void 0),m([v()],L.prototype,"sourceJSON",void 0),m([v({json:{read:!1},value:"elevation",readOnly:!0})],L.prototype,"type",void 0),m([v(f)],L.prototype,"url",void 0),m([v()],L.prototype,"version",void 0),m([w("version",["currentVersion"])],L.prototype,"readVersion",null),L=m([_("esri.layers.ElevationLayer")],L);var j=L;export default j;
