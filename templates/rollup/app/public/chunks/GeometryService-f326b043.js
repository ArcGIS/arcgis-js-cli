import{L as e,cP as t,ak as r,aD as n,bK as s,bc as i,p as o,y as a,q as l,cQ as c,cf as N,c0 as u,c4 as p,cB as f}from"../main.js";import{e as y,n as m}from"./utils-c2cb965f.js";import{p as T}from"./ProjectParameters-f8fbee2e.js";function I(e){return{geometryType:r(e[0]),geometries:e.map((e=>e.toJSON()))}}function g(e,r,n){const s=t(r);return e.map((e=>{const t=s.fromJSON(e);return t.spatialReference=n,t}))}async function S(t,r,s,i){const o=r[0].spatialReference,a=y(t),l={...a.query,f:"json",sr:JSON.stringify(o.toJSON()),polygons:JSON.stringify(I(r).geometries),polylines:JSON.stringify(I(s).geometries)},c=m(l,i);return e(a.path+"/autoComplete",c).then((({data:e})=>(e.geometries||[]).map((({rings:e})=>new n({spatialReference:o,rings:e})))))}async function _(t,r,n){const i=r[0].spatialReference,o=y(t),a={...o.query,f:"json",sr:JSON.stringify(i.toJSON()),geometries:JSON.stringify(I(r))},l=m(a,n);return e(o.path+"/convexHull",l).then((({data:e})=>s(e.geometry).set({spatialReference:i})))}async function d(t,n,i,o){const a=n[0].spatialReference,l=y(t);let c={query:{...l.query,f:"json",sr:JSON.stringify(a.toJSON()),geometries:JSON.stringify(I(n)),geometry:JSON.stringify({geometryType:r(i),geometry:i.toJSON()})}};return o&&(c={...o,...c}),e(l.path+"/difference",c).then((({data:e})=>(e.geometries||[]).map((e=>s(e).set({spatialReference:a})))))}const O=new i({MGRS:"mgrs",USNG:"usng",UTM:"utm",GeoRef:"geo-ref",GARS:"gars",DMS:"dms",DDM:"ddm",DD:"dd"});const R=new i({109006:"centimeters",9102:"decimal-degrees",109005:"decimeters",9002:"feet",109009:"inches",9036:"kilometers",9001:"meters",9035:"miles",109007:"millimeters",109012:"nautical-miles",9096:"yards"});let U=class extends N{constructor(e){super(e),this.deviationUnit=null,this.geometries=null,this.maxDeviation=null}};o([a({type:String,json:{write:!0}})],U.prototype,"deviationUnit",void 0),o([a({json:{read:{reader:e=>e?e.map((e=>s(e))):null},write:{writer:(e,t)=>{t.geometries=e.map((e=>e.toJSON()))}}}})],U.prototype,"geometries",void 0),o([a({type:Number,json:{write:!0}})],U.prototype,"maxDeviation",void 0),U=o([l("esri.tasks.support.GeneralizeParameters")],U),U.from=c(U);var h=U;async function E(t,n,i){const o=(n=h.from(n)).toJSON(),a=function(e){const{geometries:t,deviationUnit:n,maxDeviation:s}=e.toJSON(),i={maxDeviation:s};return t&&t.length&&(i.geometries=JSON.stringify({geometryType:r(t[0]),geometries:t}),i.sr=JSON.stringify(t[0].spatialReference)),R.write(n,i,"deviationUnit"),i}(n),l=y(t),c={...l.query,f:"json",...a},N=o.geometries[0].spatialReference,u=m(c,i);return e(l.path+"/generalize",u).then((({data:e})=>(e.geometries||[]).map((e=>s(e).set({spatialReference:N})))))}async function A(t,n,i,o){const a=n[0].spatialReference,l=y(t),c={...l.query,f:"json",sr:JSON.stringify(a.toJSON()),geometries:JSON.stringify(I(n)),geometry:JSON.stringify({geometryType:r(i),geometry:i.toJSON()})},N=m(c,o);return e(l.path+"/intersect",N).then((({data:e})=>(e.geometries||[]).map((e=>s(e).set({spatialReference:a})))))}const J=new i({preserveShape:"preserve-shape"});function w(e){const{polylines:t,lengthUnit:r,geodesic:n,calculationType:s}=e.toJSON(),i={};i.polylines=JSON.stringify(t);const o=e.polylines[0].spatialReference;return i.sr=o.wkid?o.wkid:JSON.stringify(o.toJSON()),r&&(i.lengthUnit=r),n&&(i.geodesic=n),s&&(i.calculationType=J.toJSON(s)),i}let v=class extends N{constructor(e){super(e),this.calculationType=null,this.geodesic=null,this.lengthUnit=null,this.polylines=null}};o([a({type:String,json:{write:!0}})],v.prototype,"calculationType",void 0),o([a({type:Boolean,json:{write:!0}})],v.prototype,"geodesic",void 0),o([a({json:{write:!0}})],v.prototype,"lengthUnit",void 0),o([a({type:[u],json:{read:{reader:e=>e?e.map((e=>s(e))):null},write:{writer:(e,t)=>{t.polylines=e.map((e=>e.toJSON()))}}}})],v.prototype,"polylines",void 0),v=o([l("esri.tasks.support.LengthsParameters")],v),v.from=c(v);var j=v;const D=new i({esriGeometryOffsetBevelled:"bevelled",esriGeometryOffsetMitered:"mitered",esriGeometryOffsetRounded:"rounded"}),L=new i({9001:"meters",9002:"feet",9036:"kilometers",9093:"miles",109012:"nautical-miles",109001:"yards"});let C=class extends N{constructor(e){super(e),this.bevelRatio=null,this.geometries=null,this.offsetDistance=null,this.offsetHow=null,this.offsetUnit=null}};o([a({type:Number,json:{write:!0}})],C.prototype,"bevelRatio",void 0),o([a({json:{read:{reader:e=>e?e.map((e=>s(e))):null},write:{writer:(e,t)=>{t.geometries=e.map((e=>e.toJSON()))}}}})],C.prototype,"geometries",void 0),o([a({type:Number,json:{write:!0}})],C.prototype,"offsetDistance",void 0),o([a({type:String,json:{write:!0}})],C.prototype,"offsetHow",void 0),o([a({type:String,json:{write:!0}})],C.prototype,"offsetUnit",void 0),C=o([l("esri.tasks.support.OffsetParameters")],C),C.from=c(C);var M=C;async function q(t,n,i){const o=function(e){const{geometries:t,bevelRatio:n,offsetDistance:s,offsetHow:i,offsetUnit:o}=e.toJSON(),a={bevelRatio:n,offsetDistance:s};return t&&t.length&&(a.geometries=JSON.stringify({geometryType:r(t[0]),geometries:t}),a.sr=JSON.stringify(t[0].spatialReference)),i&&(a.offsetHow=D.toJSON(i)),o&&(a.offsetUnit=L.toJSON(o)),a}(n=M.from(n)),a=y(t),l={...a.query,f:"json",...o},c=n.geometries[0].spatialReference,N=m(l,i);return e(a.path+"/offset",N).then((({data:e})=>(e.geometries||[]).map((e=>s(e).set({spatialReference:c})))))}const G=c(T);const x=new i({esriGeometryRelationCross:"cross",esriGeometryRelationDisjoint:"disjoint",esriGeometryRelationIn:"in",esriGeometryRelationInteriorIntersection:"interior-intersection",esriGeometryRelationIntersection:"intersection",esriGeometryRelationLineCoincidence:"line-coincidence",esriGeometryRelationLineTouch:"line-touch",esriGeometryRelationOverlap:"overlap",esriGeometryRelationPointTouch:"point-touch",esriGeometryRelationTouch:"touch",esriGeometryRelationWithin:"within",esriGeometryRelationRelation:"relation"});let H=class extends N{constructor(e){super(e),this.geometries1=null,this.geometries2=null,this.relation=null,this.relationParameter=null}};o([a({json:{read:{reader:e=>e?e.map((e=>s(e))):null},write:{writer:(e,t)=>{t.geometries1=e.map((e=>e.toJSON()))}}}})],H.prototype,"geometries1",void 0),o([a({json:{read:{reader:e=>e?e.map((e=>s(e))):null},write:{writer:(e,t)=>{t.geometries2=e.map((e=>e.toJSON()))}}}})],H.prototype,"geometries2",void 0),o([a({type:String,json:{write:!0}})],H.prototype,"relation",void 0),o([a({type:String,json:{write:!0}})],H.prototype,"relationParameter",void 0),H=o([l("esri.tasks.support.RelationParameters")],H),H.from=c(H);var b=H;async function k(t,n,s){const i=function(e){const{geometries1:t,geometries2:n,relation:s,relationParameter:i}=e.toJSON(),o={};if(t&&t.length){o.geometries1=JSON.stringify({geometryType:r(t[0]),geometries:t});const e=t[0].spatialReference;o.sr=e.wkid?e.wkid:JSON.stringify(e)}return n&&n.length>0&&(o.geometries2=JSON.stringify({geometryType:r(n[0]),geometries:n})),s&&(o.relation=x.toJSON(s)),i&&(o.relationParam=i),o}(n=b.from(n)),o=y(t),a={...o.query,f:"json",...i},l=m(a,s);return e(o.path+"/relation",l).then((({data:e})=>e.relations))}async function Y(t,n,s){const i="string"==typeof t?p(t):t,o=n[0].spatialReference,a=r(n[0]),l={...s,query:{...i.query,f:"json",sr:o.wkid?o.wkid:JSON.stringify(o),geometries:JSON.stringify(I(n))}},{data:c}=await e(i.path+"/simplify",l);return g(c.geometries,a,o)}const K=new i({0:"default-curve-extension",1:"relocate-ends",2:"keep-end-attributes",4:"no-end-attributes",8:"no-extend-at-from",16:"no-extend-at-to"});let B=class extends N{constructor(e){super(e),this.extendHow="default-curve-extension",this.polylines=null,this.trimExtendTo=null}};o([a({type:String,json:{write:!0}})],B.prototype,"extendHow",void 0),o([a({type:[u],json:{read:{reader:e=>e?e.map((e=>s(e))):null},write:{writer:(e,t)=>{t.polylines=e.map((e=>e.toJSON()))}}}})],B.prototype,"polylines",void 0),o([a({json:{read:{reader:e=>e?s(e):null},write:{writer:(e,t)=>{t.trimExtendTo=e.toJSON()}}}})],B.prototype,"trimExtendTo",void 0),B=o([l("esri.tasks.support.TrimExtendParameters")],B),B.from=c(B);var F=B;async function P(t,r,n){const s=function(e){const{extendHow:t,polylines:r,trimExtendTo:n}=e.toJSON(),s={};return s.extendHow=K.toJSON(t),r&&r.length&&(s.polylines=JSON.stringify(r),s.sr=JSON.stringify(r[0].spatialReference)),n&&(s.trimExtendTo=JSON.stringify(n)),s}(r=F.from(r)),i=y(t),o={...i.query,f:"json",...s},a=r.sr,l=m(o,n);return e(i.path+"/trimExtend",l).then((({data:e})=>(e.geometries||[]).map((({paths:e})=>new u({spatialReference:a,paths:e})))))}async function Q(t,r,n){const i=r[0].spatialReference,o=y(t),a={...o.query,f:"json",sr:JSON.stringify(i.toJSON()),geometries:JSON.stringify(I(r))},l=m(a,n);return e(o.path+"/union",l).then((({data:e})=>s(e.geometry).set({spatialReference:i})))}let V=class extends f{constructor(e){super(e),this.url=null}areasAndLengths(t,r){return async function(t,r,n){const s=y(t),i={...s.query,f:"json",...r.toJSON()},o=m(i,n);return e(s.path+"/areasAndLengths",o).then((e=>e.data))}(this.url,t,r)}autoComplete(e,t,r){return S(this.url,e,t,r)}buffer(t,r){return async function(t,r,s){const i=y(t),o={...i.query,f:"json",...r.toJSON()},a=r.outSpatialReference||r.geometries[0].spatialReference,l=m(o,s);return e(i.path+"/buffer",l).then((e=>(e.data.geometries||[]).map((({rings:e})=>new n({spatialReference:a,rings:e})))))}(this.url,t,r)}convexHull(e,t){return _(this.url,e,t)}cut(t,n,i){return async function(t,n,i,o){const a=y(t),l=n[0].spatialReference,c={...o,query:{...a.query,f:"json",sr:JSON.stringify(l),target:JSON.stringify({geometryType:r(n[0]),geometries:n}),cutter:JSON.stringify(i)}},N=await e(a.path+"/cut",c),{cutIndexes:u,geometries:p=[]}=N.data;return{cutIndexes:u,geometries:p.map((e=>{const t=s(e);return t.spatialReference=l,t}))}}(this.url,t,n,i)}densify(t,r){return async function(t,r,n){const i=r.geometries[0].spatialReference,o=y(t),a={...o.query,f:"json",...r.toJSON()},l=m(a,n);return e(o.path+"/densify",l).then((({data:e})=>(e.geometries||[]).map((e=>s(e).set({spatialReference:i})))))}(this.url,t,r)}difference(e,t,r){return d(this.url,e,t,r)}distance(t,r){return async function(t,r,n){const s=y(t),i={...s.query,f:"json",...r.toJSON()},o=m(i,n);return e(s.path+"/distance",o).then((({data:e})=>e&&e.distance))}(this.url,t,r)}fromGeoCoordinateString(t,r){return async function(t,r,n){const s={};null!=r.sr&&"object"==typeof r.sr?s.sr=r.sr.wkid||JSON.stringify(r.sr):s.sr=r.sr,s.strings=JSON.stringify(r.strings);const i=r.conversionType||"mgrs";s.conversionType=O.toJSON(i),s.conversionMode=r.conversionMode;const o=y(t),a={...o.query,f:"json",...s},l=m(a,n);return e(o.path+"/fromGeoCoordinateString",l).then((({data:e})=>e.coordinates))}(this.url,t,r)}generalize(e,t){return E(this.url,e,t)}intersect(e,t,r){return A(this.url,e,t,r)}labelPoints(t,r){return function(t,r,n){const i=r.map((e=>e.toJSON())),o=r[0].spatialReference,a=y(t),l={...a.query,f:"json",sr:o.wkid?o.wkid:JSON.stringify(o.toJSON()),polygons:JSON.stringify(i)},c=m(l,n);return e(a.path+"/labelPoints",c).then((({data:e})=>(e.labelPoints||[]).map((e=>s(e).set({spatialReference:o})))))}(this.url,t,r)}lengths(t,r){return async function(t,r,n){const s=w(r=j.from(r)),i=y(t),o={...i.query,f:"json",...s},a=m(o,n);return e(i.path+"/lengths",a).then((({data:e})=>e))}(this.url,t,r)}offset(e,t){return q(this.url,e,t)}project(t,n){return async function(t,n,s){n=G(n);const i=y(t),o={...i.query,f:"json",...n.toJSON()},a=n.outSpatialReference,l=r(n.geometries[0]),c=m(o,s);return e(i.path+"/project",c).then((({data:{geometries:e}})=>g(e,l,a)))}(this.url,t,n)}relation(e,t){return k(this.url,e,t)}reshape(t,n,i){return async function(t,n,i,o){const a=n.spatialReference,l=y(t),c={...l.query,f:"json",sr:JSON.stringify(a.toJSON()),target:JSON.stringify({geometryType:r(n),geometry:n.toJSON()}),reshaper:JSON.stringify(i.toJSON())},N=m(c,o);return e(l.path+"/reshape",N).then((({data:e})=>s(e.geometry).set({spatialReference:a})))}(this.url,t,n,i)}simplify(e,t){return Y(this.url,e,t)}toGeoCoordinateString(t,r){return async function(t,r,n){const s={};null!=r.sr&&"object"==typeof r.sr?s.sr=r.sr.wkid||JSON.stringify(r.sr):s.sr=r.sr,s.coordinates=JSON.stringify(r.coordinates);const i=r.conversionType||"mgrs";s.conversionType=O.toJSON(i),s.conversionMode=r.conversionMode,s.numOfDigits=r.numOfDigits,s.rounding=r.rounding,s.addSpaces=r.addSpaces;const o=y(t),a={...o.query,f:"json",...s},l=m(a,n);return e(o.path+"/toGeoCoordinateString",l).then((({data:e})=>e.strings))}(this.url,t,r)}trimExtend(e,t){return P(this.url,e,t)}union(e,t){return Q(this.url,e,t)}};V.UNIT_METER=9001,V.UNIT_GERMAN_METER=9031,V.UNIT_FOOT=9002,V.UNIT_SURVEY_FOOT=9003,V.UNIT_CLARKE_FOOT=9005,V.UNIT_FATHOM=9014,V.UNIT_NAUTICAL_MILE=9030,V.UNIT_SURVEY_CHAIN=9033,V.UNIT_SURVEY_LINK=9034,V.UNIT_SURVEY_MILE=9035,V.UNIT_KILOMETER=9036,V.UNIT_CLARKE_YARD=9037,V.UNIT_CLARKE_CHAIN=9038,V.UNIT_CLARKE_LINK=9039,V.UNIT_SEARS_YARD=9040,V.UNIT_SEARS_FOOT=9041,V.UNIT_SEARS_CHAIN=9042,V.UNIT_SEARS_LINK=9043,V.UNIT_BENOIT_1895A_YARD=9050,V.UNIT_BENOIT_1895A_FOOT=9051,V.UNIT_BENOIT_1895A_CHAIN=9052,V.UNIT_BENOIT_1895A_LINK=9053,V.UNIT_BENOIT_1895B_YARD=9060,V.UNIT_BENOIT_1895B_FOOT=9061,V.UNIT_BENOIT_1895B_CHAIN=9062,V.UNIT_BENOIT_1895B_LINK=9063,V.UNIT_INDIAN_FOOT=9080,V.UNIT_INDIAN_1937_FOOT=9081,V.UNIT_INDIAN_1962_FOOT=9082,V.UNIT_INDIAN_1975_FOOT=9083,V.UNIT_INDIAN_YARD=9084,V.UNIT_INDIAN_1937_YARD=9085,V.UNIT_INDIAN_1962_YARD=9086,V.UNIT_INDIAN_1975_YARD=9087,V.UNIT_FOOT_1865=9070,V.UNIT_RADIAN=9101,V.UNIT_DEGREE=9102,V.UNIT_ARCMINUTE=9103,V.UNIT_ARCSECOND=9104,V.UNIT_GRAD=9105,V.UNIT_GON=9106,V.UNIT_MICRORADIAN=9109,V.UNIT_ARCMINUTE_CENTESIMAL=9112,V.UNIT_ARCSECOND_CENTESIMAL=9113,V.UNIT_MIL6400=9114,V.UNIT_BRITISH_1936_FOOT=9095,V.UNIT_GOLDCOAST_FOOT=9094,V.UNIT_INTERNATIONAL_CHAIN=109003,V.UNIT_INTERNATIONAL_LINK=109004,V.UNIT_INTERNATIONAL_YARD=109001,V.UNIT_STATUTE_MILE=9093,V.UNIT_SURVEY_YARD=109002,V.UNIT_50KILOMETER_LENGTH=109030,V.UNIT_150KILOMETER_LENGTH=109031,V.UNIT_DECIMETER=109005,V.UNIT_CENTIMETER=109006,V.UNIT_MILLIMETER=109007,V.UNIT_INTERNATIONAL_INCH=109008,V.UNIT_US_SURVEY_INCH=109009,V.UNIT_INTERNATIONAL_ROD=109010,V.UNIT_US_SURVEY_ROD=109011,V.UNIT_US_NAUTICAL_MILE=109012,V.UNIT_UK_NAUTICAL_MILE=109013,V.UNIT_SQUARE_INCHES="esriSquareInches",V.UNIT_SQUARE_FEET="esriSquareFeet",V.UNIT_SQUARE_YARDS="esriSquareYards",V.UNIT_ACRES="esriAcres",V.UNIT_SQUARE_MILES="esriSquareMiles",V.UNIT_SQUARE_MILLIMETERS="esriSquareMillimeters",V.UNIT_SQUARE_CENTIMETERS="esriSquareCentimeters",V.UNIT_SQUARE_DECIMETERS="esriSquareDecimeters",V.UNIT_SQUARE_METERS="esriSquareMeters",V.UNIT_ARES="esriAres",V.UNIT_HECTARES="esriHectares",V.UNIT_SQUARE_KILOMETERS="esriSquareKilometers",o([a()],V.prototype,"url",void 0),V=o([l("esri.tasks.GeometryService")],V);var z=V;export default z;
