import{eX as e,eZ as t,cE as o,cF as r,eY as s,cG as i,cJ as l,a,U as n,L as p,F as y,p as c,y as u,cz as d,cI as S,q as f,fo as h,fp as v,fq as m,fr as b,fs as g}from"../main.js";const C={base:h,key:"type",typeMap:{"simple-line":v},errorContext:"symbol"},F={base:h,key:"type",typeMap:{"picture-marker":m,"simple-marker":b},errorContext:"symbol"},R={base:h,key:"type",typeMap:{"simple-fill":g},errorContext:"symbol"};let x=class extends(e(t(o(r(s(i(l))))))){constructor(...e){super(...e),this.description=null,this.title=null,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.outSpatialReference=null,this.url=null,this.type="geo-rss"}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}readFeatureCollections(e,t){return t.featureCollection.layers.forEach((e=>{const t=e.layerDefinition.drawingInfo.renderer.symbol;t&&"esriSFS"===t.type&&t.outline&&-1!==t.outline.style.indexOf("esriSFS")&&(t.outline.style="esriSLSSolid")})),t.featureCollection.layers}load(e){const t=a(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).then((()=>this._fetchService(t)),(()=>this._fetchService(t)))),n(this)}async _fetchService(e){const{data:t}=await p(y.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:this.outSpatialReference?JSON.stringify(this.outSpatialReference.toJSON()):void 0},signal:e});this.read(t,{origin:"service"})}};c([u()],x.prototype,"description",void 0),c([u()],x.prototype,"title",void 0),c([u()],x.prototype,"featureCollections",void 0),c([d("service","featureCollections",["featureCollection.layers"])],x.prototype,"readFeatureCollections",null),c([u({types:C})],x.prototype,"lineSymbol",void 0),c([u({type:["show","hide"]})],x.prototype,"listMode",void 0),c([u({types:F})],x.prototype,"pointSymbol",void 0),c([u({types:R})],x.prototype,"polygonSymbol",void 0),c([u()],x.prototype,"outSpatialReference",void 0),c([u(S)],x.prototype,"url",void 0),c([u({readOnly:!0,json:{read:!1},value:"geo-rss"})],x.prototype,"type",void 0),x=c([f("esri.layers.GeoRSSLayer")],x);var k=x;export default k;
