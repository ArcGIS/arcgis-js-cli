import{p as e,q as t,aX as s,a}from"../main.js";import{o as r}from"./heatmapUtils-b0650e1d.js";import{p as i}from"./BaseProcessor-823d1bfc.js";let o=class extends i{constructor(){super(...arguments),this.type="heatmap",this._tileKeyToFeatureSets=new Map}initialize(){this.handles.add([this.tileStore.on("update",this.onTileUpdate.bind(this))])}async update(e,t){const a=t.schema.processors[0];"heatmap"===a.type&&s(this._schema,a)&&(e.mesh=!0,this._schema=a)}onTileUpdate(e){for(const t of e.removed)this._tileKeyToFeatureSets.delete(t.key.id)}async onTileData(e,t,s){this._tileKeyToFeatureSets.has(e.key.id)&&"replace"!==t.type||this._tileKeyToFeatureSets.set(e.key.id,new Map);const i=this._tileKeyToFeatureSets.get(e.key.id);a(t.addOrUpdate)&&i.set(t.addOrUpdate.instance,t);let o=t.end;if(i.forEach((e=>o=o||e.end)),!o)return;const n=[];i.forEach((e=>{a(e.addOrUpdate)&&n.push(e.addOrUpdate)}));const d=r(n,this._schema.mesh,512,512),h={tileKey:e.key.id,intensityInfo:d},l=[d.matrix];return this.remoteClient.invoke("tileRenderer.onTileData",h,{...s,transferList:l})}onTileError(e,t,s){return this.remoteClient.invoke("tileRenderer.onTileError",{tileKey:e.id,error:t},s)}};o=e([t("esri.views.2d.layers.features.processors.HeatmapProcessor")],o);var n=o;export default n;
