import{eX as e,fy as t,eY as r,eZ as s,cD as i,cE as a,cF as o,cG as l,m as n,cJ as p,a as c,U as y,fS as h,bo as u,k as m,L as d,T as g,fa as b,p as v,y as f,cz as S,b7 as x,eS as w,cI as O,q as I}from"../main.js";import{e as j}from"./sublayerUtils-be50c78c.js";import{y as q}from"./ExportImageParameters-5c93286e.js";import{e as M}from"./scaleUtils-b6277eec.js";import{f as F,u as L,e as P,H as J}from"./SublayersOwner-86c87ecb.js";let N=class extends(e(t(r(s(F(L(i(a(o(l(P(n(p))))))))))))){constructor(...e){super(...e),this.alwaysRefetch=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.labelsVisible=!1,this.isReference=null,this.operationalLayerType="ArcGISMapServiceLayer",this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=c(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).then((()=>this._fetchService(t)),(()=>this._fetchService(t)))),y(this)}readImageFormat(e,t){const r=t.supportedImageFormatTypes;return r&&r.indexOf("PNG32")>-1?"png32":"png24"}writeSublayers(e,t,r,s){if(!this.loaded||!e)return;const i=e.slice().reverse().flatten((({sublayers:e})=>e&&e.toArray().reverse())).toArray();let a=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap.supportsDynamicLayers){const e=h(s.origin);if(3===e){const e=this.createSublayersForOrigin("service").sublayers;a=j(i,e,2)}else if(e>3){const e=this.createSublayersForOrigin("portal-item");a=j(i,e.sublayers,h(e.origin))}}const o=[],l={writeSublayerStructure:a,...s};let n=a;i.forEach((e=>{const t=e.write({},l);o.push(t),n=n||"user"===e.originOf("visible")})),o.some((e=>Object.keys(e).length>1))&&(t.layers=o),n&&(t.visibleLayers=i.filter((e=>e.visible)).map((e=>e.id)))}createExportImageParameters(e,t,r,s){const i=s&&s.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const a=new q({layer:this,scale:M({extent:e,width:t})*i}),o=a.toJSON();a.destroy();const l=!s||!s.rotation||this.version<10.3?{}:{rotation:-s.rotation},n=e&&e.spatialReference,p=n.wkid||JSON.stringify(n.toJSON());o.dpi*=i;const c={};if(null==s?void 0:s.timeExtent){const{start:e,end:t}=s.timeExtent.toJSON();c.time=e&&t&&e===t?""+e:`${null==e?"null":e},${null==t?"null":t}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(c.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:p,imageSR:p,size:t+","+r,...o,...l,...c}}async fetchImage(e,t,r,s){const i={responseType:"image"};s&&s.timestamp&&(i.query={...i.query,_ts:s.timestamp}),s&&s.signal&&(i.signal=s.signal),this.customParameters&&Object.keys(this.customParameters).length&&(i.query={...this.customParameters,...i.query});const a=this.parsedUrl.path+"/export",o={...this.parsedUrl.query,...this.createExportImageParameters(e,t,r,s),f:"image",_ts:this.alwaysRefetch?Date.now():null};return null==o.dynamicLayers||this.capabilities.exportMap.supportsDynamicLayers?(i.query?i.query={...o,...i.query}:i.query=o,d(a,i).then((e=>e.data)).catch((e=>{if(g(e))throw e;throw new m("mapimagelayer:image-fetch-error","Unable to load image: "+a,{error:e})}))):u(new m("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:o}))}loadAll(){return b(this,(e=>{e(this.allSublayers)}))}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:r}=await d(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters},signal:e});r&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl})}};v([f()],N.prototype,"alwaysRefetch",void 0),v([f()],N.prototype,"dpi",void 0),v([f()],N.prototype,"gdbVersion",void 0),v([f({json:{read:!1,write:!1}})],N.prototype,"popupEnabled",void 0),v([f()],N.prototype,"imageFormat",void 0),v([S("imageFormat",["supportedImageFormatTypes"])],N.prototype,"readImageFormat",null),v([f({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],N.prototype,"imageMaxHeight",void 0),v([f({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],N.prototype,"imageMaxWidth",void 0),v([f()],N.prototype,"imageTransparency",void 0),v([f({json:{read:!1,write:!1}})],N.prototype,"labelsVisible",void 0),v([f({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],N.prototype,"isReference",void 0),v([f({type:["ArcGISMapServiceLayer"]})],N.prototype,"operationalLayerType",void 0),v([f()],N.prototype,"sourceJSON",void 0),v([f({json:{write:{ignoreOrigin:!0}}})],N.prototype,"sublayers",void 0),v([x("sublayers",{layers:{type:[J]},visibleLayers:{type:[w]}})],N.prototype,"writeSublayers",null),v([f({type:["show","hide","hide-children"]})],N.prototype,"listMode",void 0),v([f({json:{read:!1},readOnly:!0,value:"map-image"})],N.prototype,"type",void 0),v([f(O)],N.prototype,"url",void 0),N=v([I("esri.layers.MapImageLayer")],N);var R=N;export default R;
