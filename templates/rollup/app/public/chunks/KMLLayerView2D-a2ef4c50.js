import{ag as e,dM as i,bL as t,U as s,v as a,L as o,aT as n,bt as l,bY as r,dN as h,A as p,dO as d,p as m,y as c,q as y}from"../main.js";import"./featureConversionUtils-0e5f7c52.js";import"./centroid-aa1305d6.js";import"./FeatureSetReader-b7349ae0.js";import"./json-9a5f5790.js";import"./quantizationUtils-779d11a7.js";import"./aaBoundingBox-56c013d2.js";import"./quickselect-efd045df.js";import"./ComputedAttributeStorage-82041b67.js";import"./definitions-5e24d82a.js";import"./RenderingContext-81847018.js";import"./Utils-b46864a6.js";import"./CircularArray-e829d2b1.js";import"./visualVariablesUtils-a8352e1b.js";import"./earcut-69661edf.js";import"./TurboLine-c366e7cd.js";import"./Rect-31175b04.js";import"./GeometryUtils-2b0c8e16.js";import"./BidiEngine-b37d0381.js";import"./VertexArrayObject-17b5c9bd.js";import"./ShaderCompiler-2335fa5a.js";import"./Container-c6c95dc1.js";import"./mat4f32-a7ddfa75.js";import"./WGLContainer-720c8185.js";import"./MaterialKey-a89f5ca3.js";import"./shapingUtils-e86a3b68.js";import"./WGLMeshFactory-05a88f56.js";import{t as _}from"./GraphicsView2D-64a51c26.js";import"./FeatureContainer-de88ad63.js";import"./VertexBuffer-06b50273.js";import"./TileContainer-59d09056.js";import"./MD5-f399cfb7.js";import"./graphicsUtils-f2509259.js";import{l as g,p as w}from"./LayerView2D-6e7585a5.js";import{c as u}from"./Bitmap-a30fe19d.js";import{t as f}from"./BitmapContainer-9f88d8f9.js";import{g as V,d as b,h as v}from"./kmlUtils-bfa585c0.js";let j=class extends(g(w)){constructor(){super(...arguments),this._handles=new e,this._bitmapIndex=new Map,this._mapImageContainer=new f,this._featuresMap=new Map,this.allVisiblePoints=new i,this.allVisiblePolylines=new i,this.allVisiblePolygons=new i,this.allVisibleMapImages=new t}hitTest(e,i){if(this.suspended||!this._pointsView&&!this._polylinesView&&!this._polygonsView)return s(null);const t=[this._pointsView.hitTest(e,i),this._polylinesView.hitTest(e,i),this._polygonsView.hitTest(e,i)];return a(t).then((e=>e.filter((e=>(e&&(e.layer=this.layer,e.sourceLayer=this.layer),!!e)))[0]||null))}update(e){this._polygonsView&&this._polygonsView.processUpdate(e),this._polylinesView&&this._polylinesView.processUpdate(e),this._pointsView&&this._pointsView.processUpdate(e)}attach(){this._handles.add([this.allVisibleMapImages.on("change",(e=>{e.added.forEach((e=>this._addMapImage(e))),e.removed.forEach((e=>this._removeMapImage(e)))}))]),this.container.addChild(this._mapImageContainer),this._polygonsView=new _({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate()}),this.container.addChild(this._polygonsView.container),this._polylinesView=new _({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate()}),this.container.addChild(this._polylinesView.container),this._pointsView=new _({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate()}),this.container.addChild(this._pointsView.container),this.watch("layer.visibleSublayers",(()=>this._refreshCollections())),this._fetchingPromise=this._fetchService().then((()=>{this._fetchingPromise=null,this.notifyChange("updating")}))}detach(){this._handles.removeAll(),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView&&(this._polygonsView.destroy(),this._polygonsView=null),this._polylinesView&&(this._polylinesView.destroy(),this._polylinesView=null),this._pointsView&&(this._pointsView.destroy(),this._pointsView=null)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return null!=this._fetchingPromise||this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(e){this.view.spatialReference.isWGS84&&o(e.href,{responseType:"image"}).then((({data:i})=>{let t=n.fromJSON(e.extent);l(t,this.view.spatialReference)&&(t=r(t,this.view.spatialReference));const s=new u(i);s.x=t.xmin,s.y=t.ymax,s.resolution=t.width/i.naturalWidth,s.rotation=e.rotation,this._mapImageContainer.addChild(s),this._bitmapIndex.set(e,s)}))}_fetchService(){return this._handles.remove("refresh-collections"),this._getParsedKML().then((e=>this._fetchSublayerService(this.layer,e)))}_fetchSublayerService(e,i){const t=e.sublayers;if(!t||0===t.length)return s();const o=[];return t.forEach((e=>{const t=h(e,"visible").then((()=>e.load())).then((()=>this._getGraphicsForSublayer(e,i))).then((i=>p((t=>{e.networkLink?t():(this._featuresMap.set(e,i),this._handles.add(d((()=>{this._refreshCollections(),t()})),"refresh-collections"))})))).then((()=>this._fetchSublayerService(e,e.sourceJSON||i)));e.visible&&o.push(t)})),a(o).then((()=>{}))}_getParsedKML(){return V(this.layer.url,this.view.spatialReference,this.layer.refreshInterval).then((e=>b(e.data)))}async _getGraphicsForSublayer(e,i){let t=null;return i.sublayers.some((i=>(t=i,i.id===e.id)))?{points:t.points&&await v(t.points),polylines:t.polylines&&await v(t.polylines),polygons:t.polygons&&await v(t.polygons),mapImages:t.mapImages}:null}_refreshCollections(){const e=this.get("layer.visibleSublayers");this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),e&&e.length&&e.forEach((e=>{const i=this._featuresMap.get(e);i&&(this.allVisiblePoints.addMany(i.points),this.allVisiblePolylines.addMany(i.polylines),this.allVisiblePolygons.addMany(i.polygons),this.allVisibleMapImages.addMany(i.mapImages))}))}_removeMapImage(e){const i=this._bitmapIndex.get(e);i&&(this._mapImageContainer.removeChild(i),this._bitmapIndex.delete(e))}};m([c()],j.prototype,"_pointsView",void 0),m([c()],j.prototype,"_polylinesView",void 0),m([c()],j.prototype,"_polygonsView",void 0),m([c()],j.prototype,"_fetchingPromise",void 0),m([c({dependsOn:["_fetchingPromise","_pointsView.updating","_polygonsView.updating","_polylinesView.updating"]})],j.prototype,"updating",void 0),j=m([y("esri.views.2d.layers.KMLLayerView2D")],j);var C=j;export default C;
